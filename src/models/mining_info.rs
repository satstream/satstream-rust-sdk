/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MiningInfo {
  /// The current block
  #[serde(rename = "blocks")]
  blocks: Option<i32>,
  /// Current network name
  #[serde(rename = "chain")]
  chain: Option<String>,
  /// The number of block transactions of the last assembled block
  #[serde(rename = "currentblocktx")]
  currentblocktx: Option<i32>,
  /// The block weight of the last assembled block
  #[serde(rename = "currentblockweight")]
  currentblockweight: Option<i32>,
  /// The current difficulty
  #[serde(rename = "difficulty")]
  difficulty: Option<f32>,
  /// The network hashes per second
  #[serde(rename = "networkhashps")]
  networkhashps: Option<f32>,
  /// The size of the mempool
  #[serde(rename = "pooledtx")]
  pooledtx: Option<i32>,
  /// Any network and blockchain warnings
  #[serde(rename = "warnings")]
  warnings: Option<String>
}

impl MiningInfo {
  pub fn new() -> MiningInfo {
    MiningInfo {
      blocks: None,
      chain: None,
      currentblocktx: None,
      currentblockweight: None,
      difficulty: None,
      networkhashps: None,
      pooledtx: None,
      warnings: None
    }
  }

  pub fn set_blocks(&mut self, blocks: i32) {
    self.blocks = Some(blocks);
  }

  pub fn with_blocks(mut self, blocks: i32) -> MiningInfo {
    self.blocks = Some(blocks);
    self
  }

  pub fn blocks(&self) -> Option<&i32> {
    self.blocks.as_ref()
  }

  pub fn reset_blocks(&mut self) {
    self.blocks = None;
  }

  pub fn set_chain(&mut self, chain: String) {
    self.chain = Some(chain);
  }

  pub fn with_chain(mut self, chain: String) -> MiningInfo {
    self.chain = Some(chain);
    self
  }

  pub fn chain(&self) -> Option<&String> {
    self.chain.as_ref()
  }

  pub fn reset_chain(&mut self) {
    self.chain = None;
  }

  pub fn set_currentblocktx(&mut self, currentblocktx: i32) {
    self.currentblocktx = Some(currentblocktx);
  }

  pub fn with_currentblocktx(mut self, currentblocktx: i32) -> MiningInfo {
    self.currentblocktx = Some(currentblocktx);
    self
  }

  pub fn currentblocktx(&self) -> Option<&i32> {
    self.currentblocktx.as_ref()
  }

  pub fn reset_currentblocktx(&mut self) {
    self.currentblocktx = None;
  }

  pub fn set_currentblockweight(&mut self, currentblockweight: i32) {
    self.currentblockweight = Some(currentblockweight);
  }

  pub fn with_currentblockweight(mut self, currentblockweight: i32) -> MiningInfo {
    self.currentblockweight = Some(currentblockweight);
    self
  }

  pub fn currentblockweight(&self) -> Option<&i32> {
    self.currentblockweight.as_ref()
  }

  pub fn reset_currentblockweight(&mut self) {
    self.currentblockweight = None;
  }

  pub fn set_difficulty(&mut self, difficulty: f32) {
    self.difficulty = Some(difficulty);
  }

  pub fn with_difficulty(mut self, difficulty: f32) -> MiningInfo {
    self.difficulty = Some(difficulty);
    self
  }

  pub fn difficulty(&self) -> Option<&f32> {
    self.difficulty.as_ref()
  }

  pub fn reset_difficulty(&mut self) {
    self.difficulty = None;
  }

  pub fn set_networkhashps(&mut self, networkhashps: f32) {
    self.networkhashps = Some(networkhashps);
  }

  pub fn with_networkhashps(mut self, networkhashps: f32) -> MiningInfo {
    self.networkhashps = Some(networkhashps);
    self
  }

  pub fn networkhashps(&self) -> Option<&f32> {
    self.networkhashps.as_ref()
  }

  pub fn reset_networkhashps(&mut self) {
    self.networkhashps = None;
  }

  pub fn set_pooledtx(&mut self, pooledtx: i32) {
    self.pooledtx = Some(pooledtx);
  }

  pub fn with_pooledtx(mut self, pooledtx: i32) -> MiningInfo {
    self.pooledtx = Some(pooledtx);
    self
  }

  pub fn pooledtx(&self) -> Option<&i32> {
    self.pooledtx.as_ref()
  }

  pub fn reset_pooledtx(&mut self) {
    self.pooledtx = None;
  }

  pub fn set_warnings(&mut self, warnings: String) {
    self.warnings = Some(warnings);
  }

  pub fn with_warnings(mut self, warnings: String) -> MiningInfo {
    self.warnings = Some(warnings);
    self
  }

  pub fn warnings(&self) -> Option<&String> {
    self.warnings.as_ref()
  }

  pub fn reset_warnings(&mut self) {
    self.warnings = None;
  }

}



