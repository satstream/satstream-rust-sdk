/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PsbtMissingData {
  #[serde(rename = "pubkeys")]
  pubkeys: Option<Vec<String>>,
  #[serde(rename = "redeemscript")]
  redeemscript: Option<String>,
  #[serde(rename = "signatures")]
  signatures: Option<Vec<String>>,
  #[serde(rename = "witnessscript")]
  witnessscript: Option<String>
}

impl PsbtMissingData {
  pub fn new() -> PsbtMissingData {
    PsbtMissingData {
      pubkeys: None,
      redeemscript: None,
      signatures: None,
      witnessscript: None
    }
  }

  pub fn set_pubkeys(&mut self, pubkeys: Vec<String>) {
    self.pubkeys = Some(pubkeys);
  }

  pub fn with_pubkeys(mut self, pubkeys: Vec<String>) -> PsbtMissingData {
    self.pubkeys = Some(pubkeys);
    self
  }

  pub fn pubkeys(&self) -> Option<&Vec<String>> {
    self.pubkeys.as_ref()
  }

  pub fn reset_pubkeys(&mut self) {
    self.pubkeys = None;
  }

  pub fn set_redeemscript(&mut self, redeemscript: String) {
    self.redeemscript = Some(redeemscript);
  }

  pub fn with_redeemscript(mut self, redeemscript: String) -> PsbtMissingData {
    self.redeemscript = Some(redeemscript);
    self
  }

  pub fn redeemscript(&self) -> Option<&String> {
    self.redeemscript.as_ref()
  }

  pub fn reset_redeemscript(&mut self) {
    self.redeemscript = None;
  }

  pub fn set_signatures(&mut self, signatures: Vec<String>) {
    self.signatures = Some(signatures);
  }

  pub fn with_signatures(mut self, signatures: Vec<String>) -> PsbtMissingData {
    self.signatures = Some(signatures);
    self
  }

  pub fn signatures(&self) -> Option<&Vec<String>> {
    self.signatures.as_ref()
  }

  pub fn reset_signatures(&mut self) {
    self.signatures = None;
  }

  pub fn set_witnessscript(&mut self, witnessscript: String) {
    self.witnessscript = Some(witnessscript);
  }

  pub fn with_witnessscript(mut self, witnessscript: String) -> PsbtMissingData {
    self.witnessscript = Some(witnessscript);
    self
  }

  pub fn witnessscript(&self) -> Option<&String> {
    self.witnessscript.as_ref()
  }

  pub fn reset_witnessscript(&mut self) {
    self.witnessscript = None;
  }

}



