/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtRequest {
  /// The inputs for the transaction
  #[serde(rename = "inputs")]
  inputs: Vec<::models::GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtInput>,
  /// Raw locktime. Non-0 value also locktime-activates inputs Optional, defaults to 0
  #[serde(rename = "locktime")]
  locktime: Option<i32>,
  /// The outputs for the transaction Each address can only appear once and there can only be one 'data' object
  #[serde(rename = "outputs")]
  outputs: Vec<::models::GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtOutput>,
  /// Marks this transaction as BIP125-replaceable Allows this transaction to be replaced by a transaction with higher fees If provided, it is an error if explicit sequence numbers are incompatible Optional, defaults to true
  #[serde(rename = "replaceable")]
  replaceable: Option<bool>
}

impl GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtRequest {
  pub fn new(inputs: Vec<::models::GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtInput>, outputs: Vec<::models::GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtOutput>) -> GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtRequest {
    GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtRequest {
      inputs: inputs,
      locktime: None,
      outputs: outputs,
      replaceable: None
    }
  }

  pub fn set_inputs(&mut self, inputs: Vec<::models::GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtInput>) {
    self.inputs = inputs;
  }

  pub fn with_inputs(mut self, inputs: Vec<::models::GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtInput>) -> GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtRequest {
    self.inputs = inputs;
    self
  }

  pub fn inputs(&self) -> &Vec<::models::GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtInput> {
    &self.inputs
  }


  pub fn set_locktime(&mut self, locktime: i32) {
    self.locktime = Some(locktime);
  }

  pub fn with_locktime(mut self, locktime: i32) -> GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtRequest {
    self.locktime = Some(locktime);
    self
  }

  pub fn locktime(&self) -> Option<&i32> {
    self.locktime.as_ref()
  }

  pub fn reset_locktime(&mut self) {
    self.locktime = None;
  }

  pub fn set_outputs(&mut self, outputs: Vec<::models::GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtOutput>) {
    self.outputs = outputs;
  }

  pub fn with_outputs(mut self, outputs: Vec<::models::GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtOutput>) -> GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtRequest {
    self.outputs = outputs;
    self
  }

  pub fn outputs(&self) -> &Vec<::models::GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtOutput> {
    &self.outputs
  }


  pub fn set_replaceable(&mut self, replaceable: bool) {
    self.replaceable = Some(replaceable);
  }

  pub fn with_replaceable(mut self, replaceable: bool) -> GithubComSatstreamSsApiServerApiTransactionRequestsCreatePsbtRequest {
    self.replaceable = Some(replaceable);
    self
  }

  pub fn replaceable(&self) -> Option<&bool> {
    self.replaceable.as_ref()
  }

  pub fn reset_replaceable(&mut self) {
    self.replaceable = None;
  }

}



