/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo {
  /// The hash of the currently best block
  #[serde(rename = "bestblockhash")]
  bestblockhash: Option<String>,
  /// The height of the most-work fully-validated chain
  #[serde(rename = "blocks")]
  blocks: Option<i32>,
  /// Current network name (main, test, signet, regtest)
  #[serde(rename = "chain")]
  chain: Option<String>,
  /// Total amount of work in active chain, in hexadecimal
  #[serde(rename = "chainwork")]
  chainwork: Option<String>,
  /// The current difficulty
  #[serde(rename = "difficulty")]
  difficulty: Option<f32>,
  /// The current number of headers we have validated
  #[serde(rename = "headers")]
  headers: Option<i32>,
  /// The median block time expressed in UNIX epoch time
  #[serde(rename = "mediantime")]
  mediantime: Option<i32>,
  /// The block time expressed in UNIX epoch time
  #[serde(rename = "time")]
  time: Option<i32>
}

impl GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo {
  pub fn new() -> GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo {
    GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo {
      bestblockhash: None,
      blocks: None,
      chain: None,
      chainwork: None,
      difficulty: None,
      headers: None,
      mediantime: None,
      time: None
    }
  }

  pub fn set_bestblockhash(&mut self, bestblockhash: String) {
    self.bestblockhash = Some(bestblockhash);
  }

  pub fn with_bestblockhash(mut self, bestblockhash: String) -> GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo {
    self.bestblockhash = Some(bestblockhash);
    self
  }

  pub fn bestblockhash(&self) -> Option<&String> {
    self.bestblockhash.as_ref()
  }

  pub fn reset_bestblockhash(&mut self) {
    self.bestblockhash = None;
  }

  pub fn set_blocks(&mut self, blocks: i32) {
    self.blocks = Some(blocks);
  }

  pub fn with_blocks(mut self, blocks: i32) -> GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo {
    self.blocks = Some(blocks);
    self
  }

  pub fn blocks(&self) -> Option<&i32> {
    self.blocks.as_ref()
  }

  pub fn reset_blocks(&mut self) {
    self.blocks = None;
  }

  pub fn set_chain(&mut self, chain: String) {
    self.chain = Some(chain);
  }

  pub fn with_chain(mut self, chain: String) -> GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo {
    self.chain = Some(chain);
    self
  }

  pub fn chain(&self) -> Option<&String> {
    self.chain.as_ref()
  }

  pub fn reset_chain(&mut self) {
    self.chain = None;
  }

  pub fn set_chainwork(&mut self, chainwork: String) {
    self.chainwork = Some(chainwork);
  }

  pub fn with_chainwork(mut self, chainwork: String) -> GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo {
    self.chainwork = Some(chainwork);
    self
  }

  pub fn chainwork(&self) -> Option<&String> {
    self.chainwork.as_ref()
  }

  pub fn reset_chainwork(&mut self) {
    self.chainwork = None;
  }

  pub fn set_difficulty(&mut self, difficulty: f32) {
    self.difficulty = Some(difficulty);
  }

  pub fn with_difficulty(mut self, difficulty: f32) -> GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo {
    self.difficulty = Some(difficulty);
    self
  }

  pub fn difficulty(&self) -> Option<&f32> {
    self.difficulty.as_ref()
  }

  pub fn reset_difficulty(&mut self) {
    self.difficulty = None;
  }

  pub fn set_headers(&mut self, headers: i32) {
    self.headers = Some(headers);
  }

  pub fn with_headers(mut self, headers: i32) -> GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo {
    self.headers = Some(headers);
    self
  }

  pub fn headers(&self) -> Option<&i32> {
    self.headers.as_ref()
  }

  pub fn reset_headers(&mut self) {
    self.headers = None;
  }

  pub fn set_mediantime(&mut self, mediantime: i32) {
    self.mediantime = Some(mediantime);
  }

  pub fn with_mediantime(mut self, mediantime: i32) -> GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo {
    self.mediantime = Some(mediantime);
    self
  }

  pub fn mediantime(&self) -> Option<&i32> {
    self.mediantime.as_ref()
  }

  pub fn reset_mediantime(&mut self) {
    self.mediantime = None;
  }

  pub fn set_time(&mut self, time: i32) {
    self.time = Some(time);
  }

  pub fn with_time(mut self, time: i32) -> GithubComSatstreamSsUtilsBitcoinCliBlockchainInfo {
    self.time = Some(time);
    self
  }

  pub fn time(&self) -> Option<&i32> {
    self.time.as_ref()
  }

  pub fn reset_time(&mut self) {
    self.time = None;
  }

}



