/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RuneEntry {
  #[serde(rename = "block")]
  block: Option<i32>,
  #[serde(rename = "burned")]
  burned: Option<i32>,
  #[serde(rename = "divisibility")]
  divisibility: Option<i32>,
  #[serde(rename = "etching")]
  etching: Option<String>,
  #[serde(rename = "mints")]
  mints: Option<i32>,
  #[serde(rename = "number")]
  number: Option<i32>,
  #[serde(rename = "premine")]
  premine: Option<i32>,
  #[serde(rename = "spaced_rune")]
  spaced_rune: Option<String>,
  #[serde(rename = "symbol")]
  symbol: Option<String>,
  #[serde(rename = "terms")]
  terms: Option<::models::RuneTerms>,
  #[serde(rename = "timestamp")]
  timestamp: Option<i32>,
  #[serde(rename = "turbo")]
  turbo: Option<bool>
}

impl RuneEntry {
  pub fn new() -> RuneEntry {
    RuneEntry {
      block: None,
      burned: None,
      divisibility: None,
      etching: None,
      mints: None,
      number: None,
      premine: None,
      spaced_rune: None,
      symbol: None,
      terms: None,
      timestamp: None,
      turbo: None
    }
  }

  pub fn set_block(&mut self, block: i32) {
    self.block = Some(block);
  }

  pub fn with_block(mut self, block: i32) -> RuneEntry {
    self.block = Some(block);
    self
  }

  pub fn block(&self) -> Option<&i32> {
    self.block.as_ref()
  }

  pub fn reset_block(&mut self) {
    self.block = None;
  }

  pub fn set_burned(&mut self, burned: i32) {
    self.burned = Some(burned);
  }

  pub fn with_burned(mut self, burned: i32) -> RuneEntry {
    self.burned = Some(burned);
    self
  }

  pub fn burned(&self) -> Option<&i32> {
    self.burned.as_ref()
  }

  pub fn reset_burned(&mut self) {
    self.burned = None;
  }

  pub fn set_divisibility(&mut self, divisibility: i32) {
    self.divisibility = Some(divisibility);
  }

  pub fn with_divisibility(mut self, divisibility: i32) -> RuneEntry {
    self.divisibility = Some(divisibility);
    self
  }

  pub fn divisibility(&self) -> Option<&i32> {
    self.divisibility.as_ref()
  }

  pub fn reset_divisibility(&mut self) {
    self.divisibility = None;
  }

  pub fn set_etching(&mut self, etching: String) {
    self.etching = Some(etching);
  }

  pub fn with_etching(mut self, etching: String) -> RuneEntry {
    self.etching = Some(etching);
    self
  }

  pub fn etching(&self) -> Option<&String> {
    self.etching.as_ref()
  }

  pub fn reset_etching(&mut self) {
    self.etching = None;
  }

  pub fn set_mints(&mut self, mints: i32) {
    self.mints = Some(mints);
  }

  pub fn with_mints(mut self, mints: i32) -> RuneEntry {
    self.mints = Some(mints);
    self
  }

  pub fn mints(&self) -> Option<&i32> {
    self.mints.as_ref()
  }

  pub fn reset_mints(&mut self) {
    self.mints = None;
  }

  pub fn set_number(&mut self, number: i32) {
    self.number = Some(number);
  }

  pub fn with_number(mut self, number: i32) -> RuneEntry {
    self.number = Some(number);
    self
  }

  pub fn number(&self) -> Option<&i32> {
    self.number.as_ref()
  }

  pub fn reset_number(&mut self) {
    self.number = None;
  }

  pub fn set_premine(&mut self, premine: i32) {
    self.premine = Some(premine);
  }

  pub fn with_premine(mut self, premine: i32) -> RuneEntry {
    self.premine = Some(premine);
    self
  }

  pub fn premine(&self) -> Option<&i32> {
    self.premine.as_ref()
  }

  pub fn reset_premine(&mut self) {
    self.premine = None;
  }

  pub fn set_spaced_rune(&mut self, spaced_rune: String) {
    self.spaced_rune = Some(spaced_rune);
  }

  pub fn with_spaced_rune(mut self, spaced_rune: String) -> RuneEntry {
    self.spaced_rune = Some(spaced_rune);
    self
  }

  pub fn spaced_rune(&self) -> Option<&String> {
    self.spaced_rune.as_ref()
  }

  pub fn reset_spaced_rune(&mut self) {
    self.spaced_rune = None;
  }

  pub fn set_symbol(&mut self, symbol: String) {
    self.symbol = Some(symbol);
  }

  pub fn with_symbol(mut self, symbol: String) -> RuneEntry {
    self.symbol = Some(symbol);
    self
  }

  pub fn symbol(&self) -> Option<&String> {
    self.symbol.as_ref()
  }

  pub fn reset_symbol(&mut self) {
    self.symbol = None;
  }

  pub fn set_terms(&mut self, terms: ::models::RuneTerms) {
    self.terms = Some(terms);
  }

  pub fn with_terms(mut self, terms: ::models::RuneTerms) -> RuneEntry {
    self.terms = Some(terms);
    self
  }

  pub fn terms(&self) -> Option<&::models::RuneTerms> {
    self.terms.as_ref()
  }

  pub fn reset_terms(&mut self) {
    self.terms = None;
  }

  pub fn set_timestamp(&mut self, timestamp: i32) {
    self.timestamp = Some(timestamp);
  }

  pub fn with_timestamp(mut self, timestamp: i32) -> RuneEntry {
    self.timestamp = Some(timestamp);
    self
  }

  pub fn timestamp(&self) -> Option<&i32> {
    self.timestamp.as_ref()
  }

  pub fn reset_timestamp(&mut self) {
    self.timestamp = None;
  }

  pub fn set_turbo(&mut self, turbo: bool) {
    self.turbo = Some(turbo);
  }

  pub fn with_turbo(mut self, turbo: bool) -> RuneEntry {
    self.turbo = Some(turbo);
    self
  }

  pub fn turbo(&self) -> Option<&bool> {
    self.turbo.as_ref()
  }

  pub fn reset_turbo(&mut self) {
    self.turbo = None;
  }

}



