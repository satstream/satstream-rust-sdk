/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtRequest {
  #[serde(rename = "inputs")]
  inputs: Vec<::models::GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtInput>,
  #[serde(rename = "locktime")]
  locktime: Option<i32>,
  #[serde(rename = "outputs")]
  outputs: Vec<::models::GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtOutput>,
  #[serde(rename = "replaceable")]
  replaceable: Option<bool>
}

impl GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtRequest {
  pub fn new(inputs: Vec<::models::GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtInput>, outputs: Vec<::models::GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtOutput>) -> GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtRequest {
    GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtRequest {
      inputs: inputs,
      locktime: None,
      outputs: outputs,
      replaceable: None
    }
  }

  pub fn set_inputs(&mut self, inputs: Vec<::models::GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtInput>) {
    self.inputs = inputs;
  }

  pub fn with_inputs(mut self, inputs: Vec<::models::GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtInput>) -> GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtRequest {
    self.inputs = inputs;
    self
  }

  pub fn inputs(&self) -> &Vec<::models::GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtInput> {
    &self.inputs
  }


  pub fn set_locktime(&mut self, locktime: i32) {
    self.locktime = Some(locktime);
  }

  pub fn with_locktime(mut self, locktime: i32) -> GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtRequest {
    self.locktime = Some(locktime);
    self
  }

  pub fn locktime(&self) -> Option<&i32> {
    self.locktime.as_ref()
  }

  pub fn reset_locktime(&mut self) {
    self.locktime = None;
  }

  pub fn set_outputs(&mut self, outputs: Vec<::models::GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtOutput>) {
    self.outputs = outputs;
  }

  pub fn with_outputs(mut self, outputs: Vec<::models::GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtOutput>) -> GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtRequest {
    self.outputs = outputs;
    self
  }

  pub fn outputs(&self) -> &Vec<::models::GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtOutput> {
    &self.outputs
  }


  pub fn set_replaceable(&mut self, replaceable: bool) {
    self.replaceable = Some(replaceable);
  }

  pub fn with_replaceable(mut self, replaceable: bool) -> GithubComSatstreamSsApiServerApiPsbtRequestsCreatePsbtRequest {
    self.replaceable = Some(replaceable);
    self
  }

  pub fn replaceable(&self) -> Option<&bool> {
    self.replaceable.as_ref()
  }

  pub fn reset_replaceable(&mut self) {
    self.replaceable = None;
  }

}



