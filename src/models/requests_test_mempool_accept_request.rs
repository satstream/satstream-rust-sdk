/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RequestsTestMempoolAcceptRequest {
  /// Optional: Reject transactions whose fee rate is higher than this value (BTC/kvB)
  #[serde(rename = "max_fee_rate")]
  max_fee_rate: Option<f32>,
  /// Array of hex-encoded raw transactions
  #[serde(rename = "raw_txs")]
  raw_txs: Option<Vec<String>>
}

impl RequestsTestMempoolAcceptRequest {
  pub fn new() -> RequestsTestMempoolAcceptRequest {
    RequestsTestMempoolAcceptRequest {
      max_fee_rate: None,
      raw_txs: None
    }
  }

  pub fn set_max_fee_rate(&mut self, max_fee_rate: f32) {
    self.max_fee_rate = Some(max_fee_rate);
  }

  pub fn with_max_fee_rate(mut self, max_fee_rate: f32) -> RequestsTestMempoolAcceptRequest {
    self.max_fee_rate = Some(max_fee_rate);
    self
  }

  pub fn max_fee_rate(&self) -> Option<&f32> {
    self.max_fee_rate.as_ref()
  }

  pub fn reset_max_fee_rate(&mut self) {
    self.max_fee_rate = None;
  }

  pub fn set_raw_txs(&mut self, raw_txs: Vec<String>) {
    self.raw_txs = Some(raw_txs);
  }

  pub fn with_raw_txs(mut self, raw_txs: Vec<String>) -> RequestsTestMempoolAcceptRequest {
    self.raw_txs = Some(raw_txs);
    self
  }

  pub fn raw_txs(&self) -> Option<&Vec<String>> {
    self.raw_txs.as_ref()
  }

  pub fn reset_raw_txs(&mut self) {
    self.raw_txs = None;
  }

}



