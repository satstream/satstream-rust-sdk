/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MempoolFees {
  /// Ancestor transaction fees in BTC
  #[serde(rename = "ancestor")]
  ancestor: Option<f32>,
  /// Base transaction fee in BTC
  #[serde(rename = "base")]
  base: Option<f32>,
  /// Descendant transaction fees in BTC
  #[serde(rename = "descendant")]
  descendant: Option<f32>,
  /// Modified transaction fee in BTC
  #[serde(rename = "modified")]
  modified: Option<f32>
}

impl MempoolFees {
  pub fn new() -> MempoolFees {
    MempoolFees {
      ancestor: None,
      base: None,
      descendant: None,
      modified: None
    }
  }

  pub fn set_ancestor(&mut self, ancestor: f32) {
    self.ancestor = Some(ancestor);
  }

  pub fn with_ancestor(mut self, ancestor: f32) -> MempoolFees {
    self.ancestor = Some(ancestor);
    self
  }

  pub fn ancestor(&self) -> Option<&f32> {
    self.ancestor.as_ref()
  }

  pub fn reset_ancestor(&mut self) {
    self.ancestor = None;
  }

  pub fn set_base(&mut self, base: f32) {
    self.base = Some(base);
  }

  pub fn with_base(mut self, base: f32) -> MempoolFees {
    self.base = Some(base);
    self
  }

  pub fn base(&self) -> Option<&f32> {
    self.base.as_ref()
  }

  pub fn reset_base(&mut self) {
    self.base = None;
  }

  pub fn set_descendant(&mut self, descendant: f32) {
    self.descendant = Some(descendant);
  }

  pub fn with_descendant(mut self, descendant: f32) -> MempoolFees {
    self.descendant = Some(descendant);
    self
  }

  pub fn descendant(&self) -> Option<&f32> {
    self.descendant.as_ref()
  }

  pub fn reset_descendant(&mut self) {
    self.descendant = None;
  }

  pub fn set_modified(&mut self, modified: f32) {
    self.modified = Some(modified);
  }

  pub fn with_modified(mut self, modified: f32) -> MempoolFees {
    self.modified = Some(modified);
    self
  }

  pub fn modified(&self) -> Option<&f32> {
    self.modified.as_ref()
  }

  pub fn reset_modified(&mut self) {
    self.modified = None;
  }

}



