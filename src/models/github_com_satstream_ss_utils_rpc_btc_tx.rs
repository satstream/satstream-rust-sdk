/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsRpcBtcTx {
  #[serde(rename = "blockheight")]
  blockheight: Option<i32>,
  #[serde(rename = "fee")]
  fee: Option<f32>,
  #[serde(rename = "hash")]
  hash: Option<String>,
  #[serde(rename = "hex")]
  hex: Option<String>,
  #[serde(rename = "index")]
  index: Option<i32>,
  #[serde(rename = "locktime")]
  locktime: Option<i32>,
  #[serde(rename = "size")]
  size: Option<i32>,
  #[serde(rename = "txid")]
  txid: Option<String>,
  #[serde(rename = "version")]
  version: Option<i32>,
  /// Vin will be stored in a separate collection in the DB
  #[serde(rename = "vin")]
  vin: Option<Vec<::models::GithubComSatstreamSsUtilsRpcVin>>,
  /// Vout will be stored in a separate collection in the DB
  #[serde(rename = "vout")]
  vout: Option<Vec<::models::GithubComSatstreamSsUtilsRpcVout>>,
  #[serde(rename = "vsize")]
  vsize: Option<i32>,
  #[serde(rename = "weight")]
  weight: Option<i32>
}

impl GithubComSatstreamSsUtilsRpcBtcTx {
  pub fn new() -> GithubComSatstreamSsUtilsRpcBtcTx {
    GithubComSatstreamSsUtilsRpcBtcTx {
      blockheight: None,
      fee: None,
      hash: None,
      hex: None,
      index: None,
      locktime: None,
      size: None,
      txid: None,
      version: None,
      vin: None,
      vout: None,
      vsize: None,
      weight: None
    }
  }

  pub fn set_blockheight(&mut self, blockheight: i32) {
    self.blockheight = Some(blockheight);
  }

  pub fn with_blockheight(mut self, blockheight: i32) -> GithubComSatstreamSsUtilsRpcBtcTx {
    self.blockheight = Some(blockheight);
    self
  }

  pub fn blockheight(&self) -> Option<&i32> {
    self.blockheight.as_ref()
  }

  pub fn reset_blockheight(&mut self) {
    self.blockheight = None;
  }

  pub fn set_fee(&mut self, fee: f32) {
    self.fee = Some(fee);
  }

  pub fn with_fee(mut self, fee: f32) -> GithubComSatstreamSsUtilsRpcBtcTx {
    self.fee = Some(fee);
    self
  }

  pub fn fee(&self) -> Option<&f32> {
    self.fee.as_ref()
  }

  pub fn reset_fee(&mut self) {
    self.fee = None;
  }

  pub fn set_hash(&mut self, hash: String) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: String) -> GithubComSatstreamSsUtilsRpcBtcTx {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&String> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_hex(&mut self, hex: String) {
    self.hex = Some(hex);
  }

  pub fn with_hex(mut self, hex: String) -> GithubComSatstreamSsUtilsRpcBtcTx {
    self.hex = Some(hex);
    self
  }

  pub fn hex(&self) -> Option<&String> {
    self.hex.as_ref()
  }

  pub fn reset_hex(&mut self) {
    self.hex = None;
  }

  pub fn set_index(&mut self, index: i32) {
    self.index = Some(index);
  }

  pub fn with_index(mut self, index: i32) -> GithubComSatstreamSsUtilsRpcBtcTx {
    self.index = Some(index);
    self
  }

  pub fn index(&self) -> Option<&i32> {
    self.index.as_ref()
  }

  pub fn reset_index(&mut self) {
    self.index = None;
  }

  pub fn set_locktime(&mut self, locktime: i32) {
    self.locktime = Some(locktime);
  }

  pub fn with_locktime(mut self, locktime: i32) -> GithubComSatstreamSsUtilsRpcBtcTx {
    self.locktime = Some(locktime);
    self
  }

  pub fn locktime(&self) -> Option<&i32> {
    self.locktime.as_ref()
  }

  pub fn reset_locktime(&mut self) {
    self.locktime = None;
  }

  pub fn set_size(&mut self, size: i32) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: i32) -> GithubComSatstreamSsUtilsRpcBtcTx {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&i32> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_txid(&mut self, txid: String) {
    self.txid = Some(txid);
  }

  pub fn with_txid(mut self, txid: String) -> GithubComSatstreamSsUtilsRpcBtcTx {
    self.txid = Some(txid);
    self
  }

  pub fn txid(&self) -> Option<&String> {
    self.txid.as_ref()
  }

  pub fn reset_txid(&mut self) {
    self.txid = None;
  }

  pub fn set_version(&mut self, version: i32) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: i32) -> GithubComSatstreamSsUtilsRpcBtcTx {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&i32> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

  pub fn set_vin(&mut self, vin: Vec<::models::GithubComSatstreamSsUtilsRpcVin>) {
    self.vin = Some(vin);
  }

  pub fn with_vin(mut self, vin: Vec<::models::GithubComSatstreamSsUtilsRpcVin>) -> GithubComSatstreamSsUtilsRpcBtcTx {
    self.vin = Some(vin);
    self
  }

  pub fn vin(&self) -> Option<&Vec<::models::GithubComSatstreamSsUtilsRpcVin>> {
    self.vin.as_ref()
  }

  pub fn reset_vin(&mut self) {
    self.vin = None;
  }

  pub fn set_vout(&mut self, vout: Vec<::models::GithubComSatstreamSsUtilsRpcVout>) {
    self.vout = Some(vout);
  }

  pub fn with_vout(mut self, vout: Vec<::models::GithubComSatstreamSsUtilsRpcVout>) -> GithubComSatstreamSsUtilsRpcBtcTx {
    self.vout = Some(vout);
    self
  }

  pub fn vout(&self) -> Option<&Vec<::models::GithubComSatstreamSsUtilsRpcVout>> {
    self.vout.as_ref()
  }

  pub fn reset_vout(&mut self) {
    self.vout = None;
  }

  pub fn set_vsize(&mut self, vsize: i32) {
    self.vsize = Some(vsize);
  }

  pub fn with_vsize(mut self, vsize: i32) -> GithubComSatstreamSsUtilsRpcBtcTx {
    self.vsize = Some(vsize);
    self
  }

  pub fn vsize(&self) -> Option<&i32> {
    self.vsize.as_ref()
  }

  pub fn reset_vsize(&mut self) {
    self.vsize = None;
  }

  pub fn set_weight(&mut self, weight: i32) {
    self.weight = Some(weight);
  }

  pub fn with_weight(mut self, weight: i32) -> GithubComSatstreamSsUtilsRpcBtcTx {
    self.weight = Some(weight);
    self
  }

  pub fn weight(&self) -> Option<&i32> {
    self.weight.as_ref()
  }

  pub fn reset_weight(&mut self) {
    self.weight = None;
  }

}



