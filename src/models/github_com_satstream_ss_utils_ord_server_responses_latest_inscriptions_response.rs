/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsOrdServerResponsesLatestInscriptionsResponse {
  #[serde(rename = "ids")]
  ids: Option<Vec<String>>,
  #[serde(rename = "more")]
  more: Option<bool>,
  #[serde(rename = "page_index")]
  page_index: Option<i32>
}

impl GithubComSatstreamSsUtilsOrdServerResponsesLatestInscriptionsResponse {
  pub fn new() -> GithubComSatstreamSsUtilsOrdServerResponsesLatestInscriptionsResponse {
    GithubComSatstreamSsUtilsOrdServerResponsesLatestInscriptionsResponse {
      ids: None,
      more: None,
      page_index: None
    }
  }

  pub fn set_ids(&mut self, ids: Vec<String>) {
    self.ids = Some(ids);
  }

  pub fn with_ids(mut self, ids: Vec<String>) -> GithubComSatstreamSsUtilsOrdServerResponsesLatestInscriptionsResponse {
    self.ids = Some(ids);
    self
  }

  pub fn ids(&self) -> Option<&Vec<String>> {
    self.ids.as_ref()
  }

  pub fn reset_ids(&mut self) {
    self.ids = None;
  }

  pub fn set_more(&mut self, more: bool) {
    self.more = Some(more);
  }

  pub fn with_more(mut self, more: bool) -> GithubComSatstreamSsUtilsOrdServerResponsesLatestInscriptionsResponse {
    self.more = Some(more);
    self
  }

  pub fn more(&self) -> Option<&bool> {
    self.more.as_ref()
  }

  pub fn reset_more(&mut self) {
    self.more = None;
  }

  pub fn set_page_index(&mut self, page_index: i32) {
    self.page_index = Some(page_index);
  }

  pub fn with_page_index(mut self, page_index: i32) -> GithubComSatstreamSsUtilsOrdServerResponsesLatestInscriptionsResponse {
    self.page_index = Some(page_index);
    self
  }

  pub fn page_index(&self) -> Option<&i32> {
    self.page_index.as_ref()
  }

  pub fn reset_page_index(&mut self) {
    self.page_index = None;
  }

}



