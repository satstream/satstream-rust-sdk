/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsBitcoinCliDecodedPsbt {
  /// The transaction fee paid if all UTXOs slots are filled
  #[serde(rename = "fee")]
  fee: Option<f32>,
  /// Array of inputs
  #[serde(rename = "inputs")]
  inputs: Option<Vec<::models::GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput>>,
  /// Array of outputs
  #[serde(rename = "outputs")]
  outputs: Option<Vec<::models::GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtOutput>>,
  #[serde(rename = "tx")]
  tx: Option<::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtTx>,
  /// The unknown global fields
  #[serde(rename = "unknown")]
  unknown: Option<::std::collections::HashMap<String, ::models::Object>>
}

impl GithubComSatstreamSsUtilsBitcoinCliDecodedPsbt {
  pub fn new() -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbt {
    GithubComSatstreamSsUtilsBitcoinCliDecodedPsbt {
      fee: None,
      inputs: None,
      outputs: None,
      tx: None,
      unknown: None
    }
  }

  pub fn set_fee(&mut self, fee: f32) {
    self.fee = Some(fee);
  }

  pub fn with_fee(mut self, fee: f32) -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbt {
    self.fee = Some(fee);
    self
  }

  pub fn fee(&self) -> Option<&f32> {
    self.fee.as_ref()
  }

  pub fn reset_fee(&mut self) {
    self.fee = None;
  }

  pub fn set_inputs(&mut self, inputs: Vec<::models::GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput>) {
    self.inputs = Some(inputs);
  }

  pub fn with_inputs(mut self, inputs: Vec<::models::GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput>) -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbt {
    self.inputs = Some(inputs);
    self
  }

  pub fn inputs(&self) -> Option<&Vec<::models::GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput>> {
    self.inputs.as_ref()
  }

  pub fn reset_inputs(&mut self) {
    self.inputs = None;
  }

  pub fn set_outputs(&mut self, outputs: Vec<::models::GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtOutput>) {
    self.outputs = Some(outputs);
  }

  pub fn with_outputs(mut self, outputs: Vec<::models::GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtOutput>) -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbt {
    self.outputs = Some(outputs);
    self
  }

  pub fn outputs(&self) -> Option<&Vec<::models::GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtOutput>> {
    self.outputs.as_ref()
  }

  pub fn reset_outputs(&mut self) {
    self.outputs = None;
  }

  pub fn set_tx(&mut self, tx: ::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtTx) {
    self.tx = Some(tx);
  }

  pub fn with_tx(mut self, tx: ::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtTx) -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbt {
    self.tx = Some(tx);
    self
  }

  pub fn tx(&self) -> Option<&::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtTx> {
    self.tx.as_ref()
  }

  pub fn reset_tx(&mut self) {
    self.tx = None;
  }

  pub fn set_unknown(&mut self, unknown: ::std::collections::HashMap<String, ::models::Object>) {
    self.unknown = Some(unknown);
  }

  pub fn with_unknown(mut self, unknown: ::std::collections::HashMap<String, ::models::Object>) -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbt {
    self.unknown = Some(unknown);
    self
  }

  pub fn unknown(&self) -> Option<&::std::collections::HashMap<String, ::models::Object>> {
    self.unknown.as_ref()
  }

  pub fn reset_unknown(&mut self) {
    self.unknown = None;
  }

}



