/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TransactionResponse {
  #[serde(rename = "chain")]
  chain: Option<String>,
  #[serde(rename = "etching")]
  etching: Option<String>,
  #[serde(rename = "inscription_count")]
  inscription_count: Option<i32>,
  #[serde(rename = "transaction")]
  transaction: Option<::models::TransactionDetails>,
  #[serde(rename = "txid")]
  txid: Option<String>
}

impl TransactionResponse {
  pub fn new() -> TransactionResponse {
    TransactionResponse {
      chain: None,
      etching: None,
      inscription_count: None,
      transaction: None,
      txid: None
    }
  }

  pub fn set_chain(&mut self, chain: String) {
    self.chain = Some(chain);
  }

  pub fn with_chain(mut self, chain: String) -> TransactionResponse {
    self.chain = Some(chain);
    self
  }

  pub fn chain(&self) -> Option<&String> {
    self.chain.as_ref()
  }

  pub fn reset_chain(&mut self) {
    self.chain = None;
  }

  pub fn set_etching(&mut self, etching: String) {
    self.etching = Some(etching);
  }

  pub fn with_etching(mut self, etching: String) -> TransactionResponse {
    self.etching = Some(etching);
    self
  }

  pub fn etching(&self) -> Option<&String> {
    self.etching.as_ref()
  }

  pub fn reset_etching(&mut self) {
    self.etching = None;
  }

  pub fn set_inscription_count(&mut self, inscription_count: i32) {
    self.inscription_count = Some(inscription_count);
  }

  pub fn with_inscription_count(mut self, inscription_count: i32) -> TransactionResponse {
    self.inscription_count = Some(inscription_count);
    self
  }

  pub fn inscription_count(&self) -> Option<&i32> {
    self.inscription_count.as_ref()
  }

  pub fn reset_inscription_count(&mut self) {
    self.inscription_count = None;
  }

  pub fn set_transaction(&mut self, transaction: ::models::TransactionDetails) {
    self.transaction = Some(transaction);
  }

  pub fn with_transaction(mut self, transaction: ::models::TransactionDetails) -> TransactionResponse {
    self.transaction = Some(transaction);
    self
  }

  pub fn transaction(&self) -> Option<&::models::TransactionDetails> {
    self.transaction.as_ref()
  }

  pub fn reset_transaction(&mut self) {
    self.transaction = None;
  }

  pub fn set_txid(&mut self, txid: String) {
    self.txid = Some(txid);
  }

  pub fn with_txid(mut self, txid: String) -> TransactionResponse {
    self.txid = Some(txid);
    self
  }

  pub fn txid(&self) -> Option<&String> {
    self.txid.as_ref()
  }

  pub fn reset_txid(&mut self) {
    self.txid = None;
  }

}



