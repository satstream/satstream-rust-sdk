/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RequestsConvertToPsbtRequest {
  /// The hex string of a raw transaction
  #[serde(rename = "hexstring")]
  hexstring: String,
  /// Whether the transaction hex is a serialized witness transaction. If not provided, heuristic tests will be used in decoding. If true, only witness deserialization will be tried. If false, only non-witness deserialization will be tried. This boolean should reflect whether the transaction has inputs (e.g. fully valid, or on-chain transactions), if known by the caller. Optional, defaults to heuristic tests if not provided.
  #[serde(rename = "is_witness")]
  is_witness: Option<bool>,
  /// If true, any signatures in the input will be discarded and conversion will continue. If false, RPC will fail if any signatures are present. Optional, defaults to false if not provided.
  #[serde(rename = "permit_sigdata")]
  permit_sigdata: Option<bool>
}

impl RequestsConvertToPsbtRequest {
  pub fn new(hexstring: String) -> RequestsConvertToPsbtRequest {
    RequestsConvertToPsbtRequest {
      hexstring: hexstring,
      is_witness: None,
      permit_sigdata: None
    }
  }

  pub fn set_hexstring(&mut self, hexstring: String) {
    self.hexstring = hexstring;
  }

  pub fn with_hexstring(mut self, hexstring: String) -> RequestsConvertToPsbtRequest {
    self.hexstring = hexstring;
    self
  }

  pub fn hexstring(&self) -> &String {
    &self.hexstring
  }


  pub fn set_is_witness(&mut self, is_witness: bool) {
    self.is_witness = Some(is_witness);
  }

  pub fn with_is_witness(mut self, is_witness: bool) -> RequestsConvertToPsbtRequest {
    self.is_witness = Some(is_witness);
    self
  }

  pub fn is_witness(&self) -> Option<&bool> {
    self.is_witness.as_ref()
  }

  pub fn reset_is_witness(&mut self) {
    self.is_witness = None;
  }

  pub fn set_permit_sigdata(&mut self, permit_sigdata: bool) {
    self.permit_sigdata = Some(permit_sigdata);
  }

  pub fn with_permit_sigdata(mut self, permit_sigdata: bool) -> RequestsConvertToPsbtRequest {
    self.permit_sigdata = Some(permit_sigdata);
    self
  }

  pub fn permit_sigdata(&self) -> Option<&bool> {
    self.permit_sigdata.as_ref()
  }

  pub fn reset_permit_sigdata(&mut self) {
    self.permit_sigdata = None;
  }

}



