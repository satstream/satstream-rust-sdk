/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PsbtBip32Deriv {
  /// The fingerprint of the master key
  #[serde(rename = "master_fingerprint")]
  master_fingerprint: Option<String>,
  /// The derivation path
  #[serde(rename = "path")]
  path: Option<String>,
  /// The public key
  #[serde(rename = "pubkey")]
  pubkey: Option<String>
}

impl PsbtBip32Deriv {
  pub fn new() -> PsbtBip32Deriv {
    PsbtBip32Deriv {
      master_fingerprint: None,
      path: None,
      pubkey: None
    }
  }

  pub fn set_master_fingerprint(&mut self, master_fingerprint: String) {
    self.master_fingerprint = Some(master_fingerprint);
  }

  pub fn with_master_fingerprint(mut self, master_fingerprint: String) -> PsbtBip32Deriv {
    self.master_fingerprint = Some(master_fingerprint);
    self
  }

  pub fn master_fingerprint(&self) -> Option<&String> {
    self.master_fingerprint.as_ref()
  }

  pub fn reset_master_fingerprint(&mut self) {
    self.master_fingerprint = None;
  }

  pub fn set_path(&mut self, path: String) {
    self.path = Some(path);
  }

  pub fn with_path(mut self, path: String) -> PsbtBip32Deriv {
    self.path = Some(path);
    self
  }

  pub fn path(&self) -> Option<&String> {
    self.path.as_ref()
  }

  pub fn reset_path(&mut self) {
    self.path = None;
  }

  pub fn set_pubkey(&mut self, pubkey: String) {
    self.pubkey = Some(pubkey);
  }

  pub fn with_pubkey(mut self, pubkey: String) -> PsbtBip32Deriv {
    self.pubkey = Some(pubkey);
    self
  }

  pub fn pubkey(&self) -> Option<&String> {
    self.pubkey.as_ref()
  }

  pub fn reset_pubkey(&mut self) {
    self.pubkey = None;
  }

}



