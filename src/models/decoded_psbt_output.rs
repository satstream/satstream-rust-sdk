/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DecodedPsbtOutput {
  /// The BIP32 derivation paths
  #[serde(rename = "bip32_derivs")]
  bip32_derivs: Option<Vec<::models::PsbtBip32Deriv>>,
  #[serde(rename = "redeem_script")]
  redeem_script: Option<::models::DecodedPsbtInputRedeemScript>,
  /// Unknown fields
  #[serde(rename = "unknown")]
  unknown: Option<::std::collections::HashMap<String, ::models::Object>>,
  #[serde(rename = "witness_script")]
  witness_script: Option<::models::DecodedPsbtInputWitnessScript>
}

impl DecodedPsbtOutput {
  pub fn new() -> DecodedPsbtOutput {
    DecodedPsbtOutput {
      bip32_derivs: None,
      redeem_script: None,
      unknown: None,
      witness_script: None
    }
  }

  pub fn set_bip32_derivs(&mut self, bip32_derivs: Vec<::models::PsbtBip32Deriv>) {
    self.bip32_derivs = Some(bip32_derivs);
  }

  pub fn with_bip32_derivs(mut self, bip32_derivs: Vec<::models::PsbtBip32Deriv>) -> DecodedPsbtOutput {
    self.bip32_derivs = Some(bip32_derivs);
    self
  }

  pub fn bip32_derivs(&self) -> Option<&Vec<::models::PsbtBip32Deriv>> {
    self.bip32_derivs.as_ref()
  }

  pub fn reset_bip32_derivs(&mut self) {
    self.bip32_derivs = None;
  }

  pub fn set_redeem_script(&mut self, redeem_script: ::models::DecodedPsbtInputRedeemScript) {
    self.redeem_script = Some(redeem_script);
  }

  pub fn with_redeem_script(mut self, redeem_script: ::models::DecodedPsbtInputRedeemScript) -> DecodedPsbtOutput {
    self.redeem_script = Some(redeem_script);
    self
  }

  pub fn redeem_script(&self) -> Option<&::models::DecodedPsbtInputRedeemScript> {
    self.redeem_script.as_ref()
  }

  pub fn reset_redeem_script(&mut self) {
    self.redeem_script = None;
  }

  pub fn set_unknown(&mut self, unknown: ::std::collections::HashMap<String, ::models::Object>) {
    self.unknown = Some(unknown);
  }

  pub fn with_unknown(mut self, unknown: ::std::collections::HashMap<String, ::models::Object>) -> DecodedPsbtOutput {
    self.unknown = Some(unknown);
    self
  }

  pub fn unknown(&self) -> Option<&::std::collections::HashMap<String, ::models::Object>> {
    self.unknown.as_ref()
  }

  pub fn reset_unknown(&mut self) {
    self.unknown = None;
  }

  pub fn set_witness_script(&mut self, witness_script: ::models::DecodedPsbtInputWitnessScript) {
    self.witness_script = Some(witness_script);
  }

  pub fn with_witness_script(mut self, witness_script: ::models::DecodedPsbtInputWitnessScript) -> DecodedPsbtOutput {
    self.witness_script = Some(witness_script);
    self
  }

  pub fn witness_script(&self) -> Option<&::models::DecodedPsbtInputWitnessScript> {
    self.witness_script.as_ref()
  }

  pub fn reset_witness_script(&mut self) {
    self.witness_script = None;
  }

}



