/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RequestsVerifyMessageRequest {
  /// The bitcoin address to use for the signature
  #[serde(rename = "address")]
  address: Option<String>,
  /// The message that was signed
  #[serde(rename = "message")]
  message: Option<String>,
  /// The signature provided by the signer in base 64 encoding
  #[serde(rename = "signature")]
  signature: Option<String>
}

impl RequestsVerifyMessageRequest {
  pub fn new() -> RequestsVerifyMessageRequest {
    RequestsVerifyMessageRequest {
      address: None,
      message: None,
      signature: None
    }
  }

  pub fn set_address(&mut self, address: String) {
    self.address = Some(address);
  }

  pub fn with_address(mut self, address: String) -> RequestsVerifyMessageRequest {
    self.address = Some(address);
    self
  }

  pub fn address(&self) -> Option<&String> {
    self.address.as_ref()
  }

  pub fn reset_address(&mut self) {
    self.address = None;
  }

  pub fn set_message(&mut self, message: String) {
    self.message = Some(message);
  }

  pub fn with_message(mut self, message: String) -> RequestsVerifyMessageRequest {
    self.message = Some(message);
    self
  }

  pub fn message(&self) -> Option<&String> {
    self.message.as_ref()
  }

  pub fn reset_message(&mut self) {
    self.message = None;
  }

  pub fn set_signature(&mut self, signature: String) {
    self.signature = Some(signature);
  }

  pub fn with_signature(mut self, signature: String) -> RequestsVerifyMessageRequest {
    self.signature = Some(signature);
    self
  }

  pub fn signature(&self) -> Option<&String> {
    self.signature.as_ref()
  }

  pub fn reset_signature(&mut self) {
    self.signature = None;
  }

}



