/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResponsesGetAddressRunesBalanceListItem {
  #[serde(rename = "amount")]
  amount: Option<String>,
  #[serde(rename = "parsedAmount")]
  parsed_amount: Option<String>,
  #[serde(rename = "rune_id")]
  rune_id: Option<String>,
  #[serde(rename = "spacedRune")]
  spaced_rune: Option<String>
}

impl ResponsesGetAddressRunesBalanceListItem {
  pub fn new() -> ResponsesGetAddressRunesBalanceListItem {
    ResponsesGetAddressRunesBalanceListItem {
      amount: None,
      parsed_amount: None,
      rune_id: None,
      spaced_rune: None
    }
  }

  pub fn set_amount(&mut self, amount: String) {
    self.amount = Some(amount);
  }

  pub fn with_amount(mut self, amount: String) -> ResponsesGetAddressRunesBalanceListItem {
    self.amount = Some(amount);
    self
  }

  pub fn amount(&self) -> Option<&String> {
    self.amount.as_ref()
  }

  pub fn reset_amount(&mut self) {
    self.amount = None;
  }

  pub fn set_parsed_amount(&mut self, parsed_amount: String) {
    self.parsed_amount = Some(parsed_amount);
  }

  pub fn with_parsed_amount(mut self, parsed_amount: String) -> ResponsesGetAddressRunesBalanceListItem {
    self.parsed_amount = Some(parsed_amount);
    self
  }

  pub fn parsed_amount(&self) -> Option<&String> {
    self.parsed_amount.as_ref()
  }

  pub fn reset_parsed_amount(&mut self) {
    self.parsed_amount = None;
  }

  pub fn set_rune_id(&mut self, rune_id: String) {
    self.rune_id = Some(rune_id);
  }

  pub fn with_rune_id(mut self, rune_id: String) -> ResponsesGetAddressRunesBalanceListItem {
    self.rune_id = Some(rune_id);
    self
  }

  pub fn rune_id(&self) -> Option<&String> {
    self.rune_id.as_ref()
  }

  pub fn reset_rune_id(&mut self) {
    self.rune_id = None;
  }

  pub fn set_spaced_rune(&mut self, spaced_rune: String) {
    self.spaced_rune = Some(spaced_rune);
  }

  pub fn with_spaced_rune(mut self, spaced_rune: String) -> ResponsesGetAddressRunesBalanceListItem {
    self.spaced_rune = Some(spaced_rune);
    self
  }

  pub fn spaced_rune(&self) -> Option<&String> {
    self.spaced_rune.as_ref()
  }

  pub fn reset_spaced_rune(&mut self) {
    self.spaced_rune = None;
  }

}



