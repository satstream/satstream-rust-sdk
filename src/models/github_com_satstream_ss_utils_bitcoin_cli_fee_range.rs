/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsBitcoinCliFeeRange {
  /// End of feerate range
  #[serde(rename = "endrange")]
  endrange: Option<f32>,
  /// Current number of txs in mempool unconfirmed
  #[serde(rename = "inmempool")]
  inmempool: Option<f32>,
  /// Number of txs that left mempool unconfirmed
  #[serde(rename = "leftmempool")]
  leftmempool: Option<f32>,
  /// Start of feerate range
  #[serde(rename = "startrange")]
  startrange: Option<f32>,
  /// Total number of txs confirmed
  #[serde(rename = "totalconfirmed")]
  totalconfirmed: Option<f32>,
  /// Number of txs confirmed within target
  #[serde(rename = "withintarget")]
  withintarget: Option<f32>
}

impl GithubComSatstreamSsUtilsBitcoinCliFeeRange {
  pub fn new() -> GithubComSatstreamSsUtilsBitcoinCliFeeRange {
    GithubComSatstreamSsUtilsBitcoinCliFeeRange {
      endrange: None,
      inmempool: None,
      leftmempool: None,
      startrange: None,
      totalconfirmed: None,
      withintarget: None
    }
  }

  pub fn set_endrange(&mut self, endrange: f32) {
    self.endrange = Some(endrange);
  }

  pub fn with_endrange(mut self, endrange: f32) -> GithubComSatstreamSsUtilsBitcoinCliFeeRange {
    self.endrange = Some(endrange);
    self
  }

  pub fn endrange(&self) -> Option<&f32> {
    self.endrange.as_ref()
  }

  pub fn reset_endrange(&mut self) {
    self.endrange = None;
  }

  pub fn set_inmempool(&mut self, inmempool: f32) {
    self.inmempool = Some(inmempool);
  }

  pub fn with_inmempool(mut self, inmempool: f32) -> GithubComSatstreamSsUtilsBitcoinCliFeeRange {
    self.inmempool = Some(inmempool);
    self
  }

  pub fn inmempool(&self) -> Option<&f32> {
    self.inmempool.as_ref()
  }

  pub fn reset_inmempool(&mut self) {
    self.inmempool = None;
  }

  pub fn set_leftmempool(&mut self, leftmempool: f32) {
    self.leftmempool = Some(leftmempool);
  }

  pub fn with_leftmempool(mut self, leftmempool: f32) -> GithubComSatstreamSsUtilsBitcoinCliFeeRange {
    self.leftmempool = Some(leftmempool);
    self
  }

  pub fn leftmempool(&self) -> Option<&f32> {
    self.leftmempool.as_ref()
  }

  pub fn reset_leftmempool(&mut self) {
    self.leftmempool = None;
  }

  pub fn set_startrange(&mut self, startrange: f32) {
    self.startrange = Some(startrange);
  }

  pub fn with_startrange(mut self, startrange: f32) -> GithubComSatstreamSsUtilsBitcoinCliFeeRange {
    self.startrange = Some(startrange);
    self
  }

  pub fn startrange(&self) -> Option<&f32> {
    self.startrange.as_ref()
  }

  pub fn reset_startrange(&mut self) {
    self.startrange = None;
  }

  pub fn set_totalconfirmed(&mut self, totalconfirmed: f32) {
    self.totalconfirmed = Some(totalconfirmed);
  }

  pub fn with_totalconfirmed(mut self, totalconfirmed: f32) -> GithubComSatstreamSsUtilsBitcoinCliFeeRange {
    self.totalconfirmed = Some(totalconfirmed);
    self
  }

  pub fn totalconfirmed(&self) -> Option<&f32> {
    self.totalconfirmed.as_ref()
  }

  pub fn reset_totalconfirmed(&mut self) {
    self.totalconfirmed = None;
  }

  pub fn set_withintarget(&mut self, withintarget: f32) {
    self.withintarget = Some(withintarget);
  }

  pub fn with_withintarget(mut self, withintarget: f32) -> GithubComSatstreamSsUtilsBitcoinCliFeeRange {
    self.withintarget = Some(withintarget);
    self
  }

  pub fn withintarget(&self) -> Option<&f32> {
    self.withintarget.as_ref()
  }

  pub fn reset_withintarget(&mut self) {
    self.withintarget = None;
  }

}



