/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AddressResponse {
  #[serde(rename = "inscriptions")]
  inscriptions: Option<Vec<String>>,
  #[serde(rename = "outputs")]
  outputs: Option<Vec<String>>,
  #[serde(rename = "runes_balances")]
  runes_balances: Option<Vec<::models::RunesBalance>>,
  #[serde(rename = "sat_balance")]
  sat_balance: Option<i32>
}

impl AddressResponse {
  pub fn new() -> AddressResponse {
    AddressResponse {
      inscriptions: None,
      outputs: None,
      runes_balances: None,
      sat_balance: None
    }
  }

  pub fn set_inscriptions(&mut self, inscriptions: Vec<String>) {
    self.inscriptions = Some(inscriptions);
  }

  pub fn with_inscriptions(mut self, inscriptions: Vec<String>) -> AddressResponse {
    self.inscriptions = Some(inscriptions);
    self
  }

  pub fn inscriptions(&self) -> Option<&Vec<String>> {
    self.inscriptions.as_ref()
  }

  pub fn reset_inscriptions(&mut self) {
    self.inscriptions = None;
  }

  pub fn set_outputs(&mut self, outputs: Vec<String>) {
    self.outputs = Some(outputs);
  }

  pub fn with_outputs(mut self, outputs: Vec<String>) -> AddressResponse {
    self.outputs = Some(outputs);
    self
  }

  pub fn outputs(&self) -> Option<&Vec<String>> {
    self.outputs.as_ref()
  }

  pub fn reset_outputs(&mut self) {
    self.outputs = None;
  }

  pub fn set_runes_balances(&mut self, runes_balances: Vec<::models::RunesBalance>) {
    self.runes_balances = Some(runes_balances);
  }

  pub fn with_runes_balances(mut self, runes_balances: Vec<::models::RunesBalance>) -> AddressResponse {
    self.runes_balances = Some(runes_balances);
    self
  }

  pub fn runes_balances(&self) -> Option<&Vec<::models::RunesBalance>> {
    self.runes_balances.as_ref()
  }

  pub fn reset_runes_balances(&mut self) {
    self.runes_balances = None;
  }

  pub fn set_sat_balance(&mut self, sat_balance: i32) {
    self.sat_balance = Some(sat_balance);
  }

  pub fn with_sat_balance(mut self, sat_balance: i32) -> AddressResponse {
    self.sat_balance = Some(sat_balance);
    self
  }

  pub fn sat_balance(&self) -> Option<&i32> {
    self.sat_balance.as_ref()
  }

  pub fn reset_sat_balance(&mut self) {
    self.sat_balance = None;
  }

}



