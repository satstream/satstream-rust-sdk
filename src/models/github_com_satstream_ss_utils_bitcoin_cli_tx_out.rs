/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsBitcoinCliTxOut {
  /// The hash of the block at the tip of the chain
  #[serde(rename = "bestblock")]
  bestblock: Option<String>,
  /// Whether this is a coinbase transaction
  #[serde(rename = "coinbase")]
  coinbase: Option<bool>,
  /// The number of confirmations
  #[serde(rename = "confirmations")]
  confirmations: Option<i32>,
  #[serde(rename = "scriptPubKey")]
  script_pub_key: Option<::models::GithubComSatstreamSsutilsBitcoincliTxOutScriptPubKey>,
  /// The transaction value in BTC
  #[serde(rename = "value")]
  value: Option<f32>
}

impl GithubComSatstreamSsUtilsBitcoinCliTxOut {
  pub fn new() -> GithubComSatstreamSsUtilsBitcoinCliTxOut {
    GithubComSatstreamSsUtilsBitcoinCliTxOut {
      bestblock: None,
      coinbase: None,
      confirmations: None,
      script_pub_key: None,
      value: None
    }
  }

  pub fn set_bestblock(&mut self, bestblock: String) {
    self.bestblock = Some(bestblock);
  }

  pub fn with_bestblock(mut self, bestblock: String) -> GithubComSatstreamSsUtilsBitcoinCliTxOut {
    self.bestblock = Some(bestblock);
    self
  }

  pub fn bestblock(&self) -> Option<&String> {
    self.bestblock.as_ref()
  }

  pub fn reset_bestblock(&mut self) {
    self.bestblock = None;
  }

  pub fn set_coinbase(&mut self, coinbase: bool) {
    self.coinbase = Some(coinbase);
  }

  pub fn with_coinbase(mut self, coinbase: bool) -> GithubComSatstreamSsUtilsBitcoinCliTxOut {
    self.coinbase = Some(coinbase);
    self
  }

  pub fn coinbase(&self) -> Option<&bool> {
    self.coinbase.as_ref()
  }

  pub fn reset_coinbase(&mut self) {
    self.coinbase = None;
  }

  pub fn set_confirmations(&mut self, confirmations: i32) {
    self.confirmations = Some(confirmations);
  }

  pub fn with_confirmations(mut self, confirmations: i32) -> GithubComSatstreamSsUtilsBitcoinCliTxOut {
    self.confirmations = Some(confirmations);
    self
  }

  pub fn confirmations(&self) -> Option<&i32> {
    self.confirmations.as_ref()
  }

  pub fn reset_confirmations(&mut self) {
    self.confirmations = None;
  }

  pub fn set_script_pub_key(&mut self, script_pub_key: ::models::GithubComSatstreamSsutilsBitcoincliTxOutScriptPubKey) {
    self.script_pub_key = Some(script_pub_key);
  }

  pub fn with_script_pub_key(mut self, script_pub_key: ::models::GithubComSatstreamSsutilsBitcoincliTxOutScriptPubKey) -> GithubComSatstreamSsUtilsBitcoinCliTxOut {
    self.script_pub_key = Some(script_pub_key);
    self
  }

  pub fn script_pub_key(&self) -> Option<&::models::GithubComSatstreamSsutilsBitcoincliTxOutScriptPubKey> {
    self.script_pub_key.as_ref()
  }

  pub fn reset_script_pub_key(&mut self) {
    self.script_pub_key = None;
  }

  pub fn set_value(&mut self, value: f32) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: f32) -> GithubComSatstreamSsUtilsBitcoinCliTxOut {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&f32> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

}



