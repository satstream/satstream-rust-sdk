/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult {
  /// Whether this tx would be accepted to the mempool
  #[serde(rename = "allowed")]
  allowed: Option<bool>,
  #[serde(rename = "fees")]
  fees: Option<::models::GithubComSatstreamSsutilsBitcoincliTestMempoolAcceptResultFees>,
  /// Package validation error, if any
  #[serde(rename = "package-error")]
  package_error: Option<String>,
  /// Rejection string
  #[serde(rename = "reject-reason")]
  reject_reason: Option<String>,
  /// The transaction hash in hex
  #[serde(rename = "txid")]
  txid: Option<String>,
  /// Virtual transaction size as defined in BIP 141
  #[serde(rename = "vsize")]
  vsize: Option<i32>,
  /// The transaction witness hash in hex
  #[serde(rename = "wtxid")]
  wtxid: Option<String>
}

impl GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult {
  pub fn new() -> GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult {
    GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult {
      allowed: None,
      fees: None,
      package_error: None,
      reject_reason: None,
      txid: None,
      vsize: None,
      wtxid: None
    }
  }

  pub fn set_allowed(&mut self, allowed: bool) {
    self.allowed = Some(allowed);
  }

  pub fn with_allowed(mut self, allowed: bool) -> GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult {
    self.allowed = Some(allowed);
    self
  }

  pub fn allowed(&self) -> Option<&bool> {
    self.allowed.as_ref()
  }

  pub fn reset_allowed(&mut self) {
    self.allowed = None;
  }

  pub fn set_fees(&mut self, fees: ::models::GithubComSatstreamSsutilsBitcoincliTestMempoolAcceptResultFees) {
    self.fees = Some(fees);
  }

  pub fn with_fees(mut self, fees: ::models::GithubComSatstreamSsutilsBitcoincliTestMempoolAcceptResultFees) -> GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult {
    self.fees = Some(fees);
    self
  }

  pub fn fees(&self) -> Option<&::models::GithubComSatstreamSsutilsBitcoincliTestMempoolAcceptResultFees> {
    self.fees.as_ref()
  }

  pub fn reset_fees(&mut self) {
    self.fees = None;
  }

  pub fn set_package_error(&mut self, package_error: String) {
    self.package_error = Some(package_error);
  }

  pub fn with_package_error(mut self, package_error: String) -> GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult {
    self.package_error = Some(package_error);
    self
  }

  pub fn package_error(&self) -> Option<&String> {
    self.package_error.as_ref()
  }

  pub fn reset_package_error(&mut self) {
    self.package_error = None;
  }

  pub fn set_reject_reason(&mut self, reject_reason: String) {
    self.reject_reason = Some(reject_reason);
  }

  pub fn with_reject_reason(mut self, reject_reason: String) -> GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult {
    self.reject_reason = Some(reject_reason);
    self
  }

  pub fn reject_reason(&self) -> Option<&String> {
    self.reject_reason.as_ref()
  }

  pub fn reset_reject_reason(&mut self) {
    self.reject_reason = None;
  }

  pub fn set_txid(&mut self, txid: String) {
    self.txid = Some(txid);
  }

  pub fn with_txid(mut self, txid: String) -> GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult {
    self.txid = Some(txid);
    self
  }

  pub fn txid(&self) -> Option<&String> {
    self.txid.as_ref()
  }

  pub fn reset_txid(&mut self) {
    self.txid = None;
  }

  pub fn set_vsize(&mut self, vsize: i32) {
    self.vsize = Some(vsize);
  }

  pub fn with_vsize(mut self, vsize: i32) -> GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult {
    self.vsize = Some(vsize);
    self
  }

  pub fn vsize(&self) -> Option<&i32> {
    self.vsize.as_ref()
  }

  pub fn reset_vsize(&mut self) {
    self.vsize = None;
  }

  pub fn set_wtxid(&mut self, wtxid: String) {
    self.wtxid = Some(wtxid);
  }

  pub fn with_wtxid(mut self, wtxid: String) -> GithubComSatstreamSsUtilsBitcoinCliTestMempoolAcceptResult {
    self.wtxid = Some(wtxid);
    self
  }

  pub fn wtxid(&self) -> Option<&String> {
    self.wtxid.as_ref()
  }

  pub fn reset_wtxid(&mut self) {
    self.wtxid = None;
  }

}



