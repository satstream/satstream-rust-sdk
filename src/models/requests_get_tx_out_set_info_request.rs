/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RequestsGetTxOutSetInfoRequest {
  /// Block hash or height
  #[serde(rename = "hash_or_height")]
  hash_or_height: Option<Value>,
  /// Which UTXO set hash should be calculated
  #[serde(rename = "hash_type")]
  hash_type: Option<String>,
  /// Whether to use coinstatsindex
  #[serde(rename = "use_index")]
  use_index: Option<bool>
}

impl RequestsGetTxOutSetInfoRequest {
  pub fn new() -> RequestsGetTxOutSetInfoRequest {
    RequestsGetTxOutSetInfoRequest {
      hash_or_height: None,
      hash_type: None,
      use_index: None
    }
  }

  pub fn set_hash_or_height(&mut self, hash_or_height: Value) {
    self.hash_or_height = Some(hash_or_height);
  }

  pub fn with_hash_or_height(mut self, hash_or_height: Value) -> RequestsGetTxOutSetInfoRequest {
    self.hash_or_height = Some(hash_or_height);
    self
  }

  pub fn hash_or_height(&self) -> Option<&Value> {
    self.hash_or_height.as_ref()
  }

  pub fn reset_hash_or_height(&mut self) {
    self.hash_or_height = None;
  }

  pub fn set_hash_type(&mut self, hash_type: String) {
    self.hash_type = Some(hash_type);
  }

  pub fn with_hash_type(mut self, hash_type: String) -> RequestsGetTxOutSetInfoRequest {
    self.hash_type = Some(hash_type);
    self
  }

  pub fn hash_type(&self) -> Option<&String> {
    self.hash_type.as_ref()
  }

  pub fn reset_hash_type(&mut self) {
    self.hash_type = None;
  }

  pub fn set_use_index(&mut self, use_index: bool) {
    self.use_index = Some(use_index);
  }

  pub fn with_use_index(mut self, use_index: bool) -> RequestsGetTxOutSetInfoRequest {
    self.use_index = Some(use_index);
    self
  }

  pub fn use_index(&self) -> Option<&bool> {
    self.use_index.as_ref()
  }

  pub fn reset_use_index(&mut self) {
    self.use_index = None;
  }

}



