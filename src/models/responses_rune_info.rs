/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResponsesRuneInfo {
  #[serde(rename = "block_height")]
  block_height: Option<i32>,
  #[serde(rename = "divisibility")]
  divisibility: Option<i32>,
  #[serde(rename = "minted")]
  minted: Option<String>,
  #[serde(rename = "premine")]
  premine: Option<::models::BigInt>,
  #[serde(rename = "rune")]
  rune: Option<String>,
  #[serde(rename = "rune_id")]
  rune_id: Option<String>,
  #[serde(rename = "spaced_rune")]
  spaced_rune: Option<String>,
  #[serde(rename = "spacers")]
  spacers: Option<i32>,
  #[serde(rename = "symbol")]
  symbol: Option<String>,
  #[serde(rename = "terms")]
  terms: Option<::models::GithubComSatstreamSsUtilsOrdinalsTerms>,
  #[serde(rename = "turbo")]
  turbo: Option<bool>,
  #[serde(rename = "tx_height")]
  tx_height: Option<i32>,
  #[serde(rename = "txid")]
  txid: Option<String>
}

impl ResponsesRuneInfo {
  pub fn new() -> ResponsesRuneInfo {
    ResponsesRuneInfo {
      block_height: None,
      divisibility: None,
      minted: None,
      premine: None,
      rune: None,
      rune_id: None,
      spaced_rune: None,
      spacers: None,
      symbol: None,
      terms: None,
      turbo: None,
      tx_height: None,
      txid: None
    }
  }

  pub fn set_block_height(&mut self, block_height: i32) {
    self.block_height = Some(block_height);
  }

  pub fn with_block_height(mut self, block_height: i32) -> ResponsesRuneInfo {
    self.block_height = Some(block_height);
    self
  }

  pub fn block_height(&self) -> Option<&i32> {
    self.block_height.as_ref()
  }

  pub fn reset_block_height(&mut self) {
    self.block_height = None;
  }

  pub fn set_divisibility(&mut self, divisibility: i32) {
    self.divisibility = Some(divisibility);
  }

  pub fn with_divisibility(mut self, divisibility: i32) -> ResponsesRuneInfo {
    self.divisibility = Some(divisibility);
    self
  }

  pub fn divisibility(&self) -> Option<&i32> {
    self.divisibility.as_ref()
  }

  pub fn reset_divisibility(&mut self) {
    self.divisibility = None;
  }

  pub fn set_minted(&mut self, minted: String) {
    self.minted = Some(minted);
  }

  pub fn with_minted(mut self, minted: String) -> ResponsesRuneInfo {
    self.minted = Some(minted);
    self
  }

  pub fn minted(&self) -> Option<&String> {
    self.minted.as_ref()
  }

  pub fn reset_minted(&mut self) {
    self.minted = None;
  }

  pub fn set_premine(&mut self, premine: ::models::BigInt) {
    self.premine = Some(premine);
  }

  pub fn with_premine(mut self, premine: ::models::BigInt) -> ResponsesRuneInfo {
    self.premine = Some(premine);
    self
  }

  pub fn premine(&self) -> Option<&::models::BigInt> {
    self.premine.as_ref()
  }

  pub fn reset_premine(&mut self) {
    self.premine = None;
  }

  pub fn set_rune(&mut self, rune: String) {
    self.rune = Some(rune);
  }

  pub fn with_rune(mut self, rune: String) -> ResponsesRuneInfo {
    self.rune = Some(rune);
    self
  }

  pub fn rune(&self) -> Option<&String> {
    self.rune.as_ref()
  }

  pub fn reset_rune(&mut self) {
    self.rune = None;
  }

  pub fn set_rune_id(&mut self, rune_id: String) {
    self.rune_id = Some(rune_id);
  }

  pub fn with_rune_id(mut self, rune_id: String) -> ResponsesRuneInfo {
    self.rune_id = Some(rune_id);
    self
  }

  pub fn rune_id(&self) -> Option<&String> {
    self.rune_id.as_ref()
  }

  pub fn reset_rune_id(&mut self) {
    self.rune_id = None;
  }

  pub fn set_spaced_rune(&mut self, spaced_rune: String) {
    self.spaced_rune = Some(spaced_rune);
  }

  pub fn with_spaced_rune(mut self, spaced_rune: String) -> ResponsesRuneInfo {
    self.spaced_rune = Some(spaced_rune);
    self
  }

  pub fn spaced_rune(&self) -> Option<&String> {
    self.spaced_rune.as_ref()
  }

  pub fn reset_spaced_rune(&mut self) {
    self.spaced_rune = None;
  }

  pub fn set_spacers(&mut self, spacers: i32) {
    self.spacers = Some(spacers);
  }

  pub fn with_spacers(mut self, spacers: i32) -> ResponsesRuneInfo {
    self.spacers = Some(spacers);
    self
  }

  pub fn spacers(&self) -> Option<&i32> {
    self.spacers.as_ref()
  }

  pub fn reset_spacers(&mut self) {
    self.spacers = None;
  }

  pub fn set_symbol(&mut self, symbol: String) {
    self.symbol = Some(symbol);
  }

  pub fn with_symbol(mut self, symbol: String) -> ResponsesRuneInfo {
    self.symbol = Some(symbol);
    self
  }

  pub fn symbol(&self) -> Option<&String> {
    self.symbol.as_ref()
  }

  pub fn reset_symbol(&mut self) {
    self.symbol = None;
  }

  pub fn set_terms(&mut self, terms: ::models::GithubComSatstreamSsUtilsOrdinalsTerms) {
    self.terms = Some(terms);
  }

  pub fn with_terms(mut self, terms: ::models::GithubComSatstreamSsUtilsOrdinalsTerms) -> ResponsesRuneInfo {
    self.terms = Some(terms);
    self
  }

  pub fn terms(&self) -> Option<&::models::GithubComSatstreamSsUtilsOrdinalsTerms> {
    self.terms.as_ref()
  }

  pub fn reset_terms(&mut self) {
    self.terms = None;
  }

  pub fn set_turbo(&mut self, turbo: bool) {
    self.turbo = Some(turbo);
  }

  pub fn with_turbo(mut self, turbo: bool) -> ResponsesRuneInfo {
    self.turbo = Some(turbo);
    self
  }

  pub fn turbo(&self) -> Option<&bool> {
    self.turbo.as_ref()
  }

  pub fn reset_turbo(&mut self) {
    self.turbo = None;
  }

  pub fn set_tx_height(&mut self, tx_height: i32) {
    self.tx_height = Some(tx_height);
  }

  pub fn with_tx_height(mut self, tx_height: i32) -> ResponsesRuneInfo {
    self.tx_height = Some(tx_height);
    self
  }

  pub fn tx_height(&self) -> Option<&i32> {
    self.tx_height.as_ref()
  }

  pub fn reset_tx_height(&mut self) {
    self.tx_height = None;
  }

  pub fn set_txid(&mut self, txid: String) {
    self.txid = Some(txid);
  }

  pub fn with_txid(mut self, txid: String) -> ResponsesRuneInfo {
    self.txid = Some(txid);
    self
  }

  pub fn txid(&self) -> Option<&String> {
    self.txid.as_ref()
  }

  pub fn reset_txid(&mut self) {
    self.txid = None;
  }

}



