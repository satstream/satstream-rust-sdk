/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsOrdServerResponsesBlocksResponse {
  #[serde(rename = "blocks")]
  blocks: Option<Vec<String>>,
  #[serde(rename = "featured_blocks")]
  featured_blocks: Option<::std::collections::HashMap<String, Vec<String>>>,
  #[serde(rename = "last")]
  last: Option<i32>
}

impl GithubComSatstreamSsUtilsOrdServerResponsesBlocksResponse {
  pub fn new() -> GithubComSatstreamSsUtilsOrdServerResponsesBlocksResponse {
    GithubComSatstreamSsUtilsOrdServerResponsesBlocksResponse {
      blocks: None,
      featured_blocks: None,
      last: None
    }
  }

  pub fn set_blocks(&mut self, blocks: Vec<String>) {
    self.blocks = Some(blocks);
  }

  pub fn with_blocks(mut self, blocks: Vec<String>) -> GithubComSatstreamSsUtilsOrdServerResponsesBlocksResponse {
    self.blocks = Some(blocks);
    self
  }

  pub fn blocks(&self) -> Option<&Vec<String>> {
    self.blocks.as_ref()
  }

  pub fn reset_blocks(&mut self) {
    self.blocks = None;
  }

  pub fn set_featured_blocks(&mut self, featured_blocks: ::std::collections::HashMap<String, Vec<String>>) {
    self.featured_blocks = Some(featured_blocks);
  }

  pub fn with_featured_blocks(mut self, featured_blocks: ::std::collections::HashMap<String, Vec<String>>) -> GithubComSatstreamSsUtilsOrdServerResponsesBlocksResponse {
    self.featured_blocks = Some(featured_blocks);
    self
  }

  pub fn featured_blocks(&self) -> Option<&::std::collections::HashMap<String, Vec<String>>> {
    self.featured_blocks.as_ref()
  }

  pub fn reset_featured_blocks(&mut self) {
    self.featured_blocks = None;
  }

  pub fn set_last(&mut self, last: i32) {
    self.last = Some(last);
  }

  pub fn with_last(mut self, last: i32) -> GithubComSatstreamSsUtilsOrdServerResponsesBlocksResponse {
    self.last = Some(last);
    self
  }

  pub fn last(&self) -> Option<&i32> {
    self.last.as_ref()
  }

  pub fn reset_last(&mut self) {
    self.last = None;
  }

}



