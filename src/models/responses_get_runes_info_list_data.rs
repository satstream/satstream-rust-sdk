/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResponsesGetRunesInfoListData {
  #[serde(rename = "pagination")]
  pagination: Option<::models::ResponsesPaginationInfo>,
  #[serde(rename = "runes")]
  runes: Option<Vec<::models::ResponsesRuneInfo>>
}

impl ResponsesGetRunesInfoListData {
  pub fn new() -> ResponsesGetRunesInfoListData {
    ResponsesGetRunesInfoListData {
      pagination: None,
      runes: None
    }
  }

  pub fn set_pagination(&mut self, pagination: ::models::ResponsesPaginationInfo) {
    self.pagination = Some(pagination);
  }

  pub fn with_pagination(mut self, pagination: ::models::ResponsesPaginationInfo) -> ResponsesGetRunesInfoListData {
    self.pagination = Some(pagination);
    self
  }

  pub fn pagination(&self) -> Option<&::models::ResponsesPaginationInfo> {
    self.pagination.as_ref()
  }

  pub fn reset_pagination(&mut self) {
    self.pagination = None;
  }

  pub fn set_runes(&mut self, runes: Vec<::models::ResponsesRuneInfo>) {
    self.runes = Some(runes);
  }

  pub fn with_runes(mut self, runes: Vec<::models::ResponsesRuneInfo>) -> ResponsesGetRunesInfoListData {
    self.runes = Some(runes);
    self
  }

  pub fn runes(&self) -> Option<&Vec<::models::ResponsesRuneInfo>> {
    self.runes.as_ref()
  }

  pub fn reset_runes(&mut self) {
    self.runes = None;
  }

}



