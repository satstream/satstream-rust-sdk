/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsBitcoinCliMempoolInfo {
  /// Sum of all virtual transaction sizes
  #[serde(rename = "bytes")]
  bytes: Option<i32>,
  /// True if mempool accepts RBF without signaling inspection
  #[serde(rename = "fullrbf")]
  fullrbf: Option<bool>,
  /// Minimum fee rate increment for mempool limiting
  #[serde(rename = "incrementalrelayfee")]
  incrementalrelayfee: Option<f32>,
  /// True if the mempool is fully loaded
  #[serde(rename = "loaded")]
  loaded: Option<bool>,
  /// Maximum memory usage for the mempool
  #[serde(rename = "maxmempool")]
  maxmempool: Option<i32>,
  /// Minimum fee rate in BTC/kvB for tx to be accepted
  #[serde(rename = "mempoolminfee")]
  mempoolminfee: Option<f32>,
  /// Current minimum relay fee for transactions
  #[serde(rename = "minrelaytxfee")]
  minrelaytxfee: Option<f32>,
  /// Current tx count
  #[serde(rename = "size")]
  size: Option<i32>,
  /// Total fees for the mempool in BTC
  #[serde(rename = "total_fee")]
  total_fee: Option<f32>,
  /// Number of unbroadcast transactions
  #[serde(rename = "unbroadcastcount")]
  unbroadcastcount: Option<i32>,
  /// Total memory usage for the mempool
  #[serde(rename = "usage")]
  usage: Option<i32>
}

impl GithubComSatstreamSsUtilsBitcoinCliMempoolInfo {
  pub fn new() -> GithubComSatstreamSsUtilsBitcoinCliMempoolInfo {
    GithubComSatstreamSsUtilsBitcoinCliMempoolInfo {
      bytes: None,
      fullrbf: None,
      incrementalrelayfee: None,
      loaded: None,
      maxmempool: None,
      mempoolminfee: None,
      minrelaytxfee: None,
      size: None,
      total_fee: None,
      unbroadcastcount: None,
      usage: None
    }
  }

  pub fn set_bytes(&mut self, bytes: i32) {
    self.bytes = Some(bytes);
  }

  pub fn with_bytes(mut self, bytes: i32) -> GithubComSatstreamSsUtilsBitcoinCliMempoolInfo {
    self.bytes = Some(bytes);
    self
  }

  pub fn bytes(&self) -> Option<&i32> {
    self.bytes.as_ref()
  }

  pub fn reset_bytes(&mut self) {
    self.bytes = None;
  }

  pub fn set_fullrbf(&mut self, fullrbf: bool) {
    self.fullrbf = Some(fullrbf);
  }

  pub fn with_fullrbf(mut self, fullrbf: bool) -> GithubComSatstreamSsUtilsBitcoinCliMempoolInfo {
    self.fullrbf = Some(fullrbf);
    self
  }

  pub fn fullrbf(&self) -> Option<&bool> {
    self.fullrbf.as_ref()
  }

  pub fn reset_fullrbf(&mut self) {
    self.fullrbf = None;
  }

  pub fn set_incrementalrelayfee(&mut self, incrementalrelayfee: f32) {
    self.incrementalrelayfee = Some(incrementalrelayfee);
  }

  pub fn with_incrementalrelayfee(mut self, incrementalrelayfee: f32) -> GithubComSatstreamSsUtilsBitcoinCliMempoolInfo {
    self.incrementalrelayfee = Some(incrementalrelayfee);
    self
  }

  pub fn incrementalrelayfee(&self) -> Option<&f32> {
    self.incrementalrelayfee.as_ref()
  }

  pub fn reset_incrementalrelayfee(&mut self) {
    self.incrementalrelayfee = None;
  }

  pub fn set_loaded(&mut self, loaded: bool) {
    self.loaded = Some(loaded);
  }

  pub fn with_loaded(mut self, loaded: bool) -> GithubComSatstreamSsUtilsBitcoinCliMempoolInfo {
    self.loaded = Some(loaded);
    self
  }

  pub fn loaded(&self) -> Option<&bool> {
    self.loaded.as_ref()
  }

  pub fn reset_loaded(&mut self) {
    self.loaded = None;
  }

  pub fn set_maxmempool(&mut self, maxmempool: i32) {
    self.maxmempool = Some(maxmempool);
  }

  pub fn with_maxmempool(mut self, maxmempool: i32) -> GithubComSatstreamSsUtilsBitcoinCliMempoolInfo {
    self.maxmempool = Some(maxmempool);
    self
  }

  pub fn maxmempool(&self) -> Option<&i32> {
    self.maxmempool.as_ref()
  }

  pub fn reset_maxmempool(&mut self) {
    self.maxmempool = None;
  }

  pub fn set_mempoolminfee(&mut self, mempoolminfee: f32) {
    self.mempoolminfee = Some(mempoolminfee);
  }

  pub fn with_mempoolminfee(mut self, mempoolminfee: f32) -> GithubComSatstreamSsUtilsBitcoinCliMempoolInfo {
    self.mempoolminfee = Some(mempoolminfee);
    self
  }

  pub fn mempoolminfee(&self) -> Option<&f32> {
    self.mempoolminfee.as_ref()
  }

  pub fn reset_mempoolminfee(&mut self) {
    self.mempoolminfee = None;
  }

  pub fn set_minrelaytxfee(&mut self, minrelaytxfee: f32) {
    self.minrelaytxfee = Some(minrelaytxfee);
  }

  pub fn with_minrelaytxfee(mut self, minrelaytxfee: f32) -> GithubComSatstreamSsUtilsBitcoinCliMempoolInfo {
    self.minrelaytxfee = Some(minrelaytxfee);
    self
  }

  pub fn minrelaytxfee(&self) -> Option<&f32> {
    self.minrelaytxfee.as_ref()
  }

  pub fn reset_minrelaytxfee(&mut self) {
    self.minrelaytxfee = None;
  }

  pub fn set_size(&mut self, size: i32) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: i32) -> GithubComSatstreamSsUtilsBitcoinCliMempoolInfo {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&i32> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_total_fee(&mut self, total_fee: f32) {
    self.total_fee = Some(total_fee);
  }

  pub fn with_total_fee(mut self, total_fee: f32) -> GithubComSatstreamSsUtilsBitcoinCliMempoolInfo {
    self.total_fee = Some(total_fee);
    self
  }

  pub fn total_fee(&self) -> Option<&f32> {
    self.total_fee.as_ref()
  }

  pub fn reset_total_fee(&mut self) {
    self.total_fee = None;
  }

  pub fn set_unbroadcastcount(&mut self, unbroadcastcount: i32) {
    self.unbroadcastcount = Some(unbroadcastcount);
  }

  pub fn with_unbroadcastcount(mut self, unbroadcastcount: i32) -> GithubComSatstreamSsUtilsBitcoinCliMempoolInfo {
    self.unbroadcastcount = Some(unbroadcastcount);
    self
  }

  pub fn unbroadcastcount(&self) -> Option<&i32> {
    self.unbroadcastcount.as_ref()
  }

  pub fn reset_unbroadcastcount(&mut self) {
    self.unbroadcastcount = None;
  }

  pub fn set_usage(&mut self, usage: i32) {
    self.usage = Some(usage);
  }

  pub fn with_usage(mut self, usage: i32) -> GithubComSatstreamSsUtilsBitcoinCliMempoolInfo {
    self.usage = Some(usage);
    self
  }

  pub fn usage(&self) -> Option<&i32> {
    self.usage.as_ref()
  }

  pub fn reset_usage(&mut self) {
    self.usage = None;
  }

}



