/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DecodedScript {
  /// The Bitcoin address (only if well-defined)
  #[serde(rename = "address")]
  address: Option<String>,
  /// Script public key
  #[serde(rename = "asm")]
  asm: Option<String>,
  /// Inferred descriptor for the script
  #[serde(rename = "desc")]
  desc: Option<String>,
  /// P2SH address wrapping this redeem script
  #[serde(rename = "p2sh")]
  p2sh: Option<String>,
  #[serde(rename = "segwit")]
  segwit: Option<::models::DecodedScriptSegwit>,
  /// The output type
  #[serde(rename = "type")]
  _type: Option<String>
}

impl DecodedScript {
  pub fn new() -> DecodedScript {
    DecodedScript {
      address: None,
      asm: None,
      desc: None,
      p2sh: None,
      segwit: None,
      _type: None
    }
  }

  pub fn set_address(&mut self, address: String) {
    self.address = Some(address);
  }

  pub fn with_address(mut self, address: String) -> DecodedScript {
    self.address = Some(address);
    self
  }

  pub fn address(&self) -> Option<&String> {
    self.address.as_ref()
  }

  pub fn reset_address(&mut self) {
    self.address = None;
  }

  pub fn set_asm(&mut self, asm: String) {
    self.asm = Some(asm);
  }

  pub fn with_asm(mut self, asm: String) -> DecodedScript {
    self.asm = Some(asm);
    self
  }

  pub fn asm(&self) -> Option<&String> {
    self.asm.as_ref()
  }

  pub fn reset_asm(&mut self) {
    self.asm = None;
  }

  pub fn set_desc(&mut self, desc: String) {
    self.desc = Some(desc);
  }

  pub fn with_desc(mut self, desc: String) -> DecodedScript {
    self.desc = Some(desc);
    self
  }

  pub fn desc(&self) -> Option<&String> {
    self.desc.as_ref()
  }

  pub fn reset_desc(&mut self) {
    self.desc = None;
  }

  pub fn set_p2sh(&mut self, p2sh: String) {
    self.p2sh = Some(p2sh);
  }

  pub fn with_p2sh(mut self, p2sh: String) -> DecodedScript {
    self.p2sh = Some(p2sh);
    self
  }

  pub fn p2sh(&self) -> Option<&String> {
    self.p2sh.as_ref()
  }

  pub fn reset_p2sh(&mut self) {
    self.p2sh = None;
  }

  pub fn set_segwit(&mut self, segwit: ::models::DecodedScriptSegwit) {
    self.segwit = Some(segwit);
  }

  pub fn with_segwit(mut self, segwit: ::models::DecodedScriptSegwit) -> DecodedScript {
    self.segwit = Some(segwit);
    self
  }

  pub fn segwit(&self) -> Option<&::models::DecodedScriptSegwit> {
    self.segwit.as_ref()
  }

  pub fn reset_segwit(&mut self) {
    self.segwit = None;
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> DecodedScript {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



