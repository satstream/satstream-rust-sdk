/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RuneResponse {
  #[serde(rename = "entry")]
  entry: Option<::models::RuneEntry>,
  #[serde(rename = "id")]
  id: Option<String>,
  #[serde(rename = "mintable")]
  mintable: Option<bool>,
  #[serde(rename = "parent")]
  parent: Option<String>
}

impl RuneResponse {
  pub fn new() -> RuneResponse {
    RuneResponse {
      entry: None,
      id: None,
      mintable: None,
      parent: None
    }
  }

  pub fn set_entry(&mut self, entry: ::models::RuneEntry) {
    self.entry = Some(entry);
  }

  pub fn with_entry(mut self, entry: ::models::RuneEntry) -> RuneResponse {
    self.entry = Some(entry);
    self
  }

  pub fn entry(&self) -> Option<&::models::RuneEntry> {
    self.entry.as_ref()
  }

  pub fn reset_entry(&mut self) {
    self.entry = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> RuneResponse {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_mintable(&mut self, mintable: bool) {
    self.mintable = Some(mintable);
  }

  pub fn with_mintable(mut self, mintable: bool) -> RuneResponse {
    self.mintable = Some(mintable);
    self
  }

  pub fn mintable(&self) -> Option<&bool> {
    self.mintable.as_ref()
  }

  pub fn reset_mintable(&mut self) {
    self.mintable = None;
  }

  pub fn set_parent(&mut self, parent: String) {
    self.parent = Some(parent);
  }

  pub fn with_parent(mut self, parent: String) -> RuneResponse {
    self.parent = Some(parent);
    self
  }

  pub fn parent(&self) -> Option<&String> {
    self.parent.as_ref()
  }

  pub fn reset_parent(&mut self) {
    self.parent = None;
  }

}



