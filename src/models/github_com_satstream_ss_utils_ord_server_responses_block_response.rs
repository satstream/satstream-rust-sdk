/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsOrdServerResponsesBlockResponse {
  #[serde(rename = "best_height")]
  best_height: Option<i32>,
  #[serde(rename = "hash")]
  hash: Option<String>,
  #[serde(rename = "height")]
  height: Option<i32>,
  #[serde(rename = "inscriptions")]
  inscriptions: Option<Vec<String>>,
  #[serde(rename = "runes")]
  runes: Option<Vec<String>>,
  #[serde(rename = "target")]
  target: Option<String>,
  #[serde(rename = "transactions")]
  transactions: Option<Vec<::models::GithubComSatstreamSsUtilsOrdServerResponsesTransaction>>
}

impl GithubComSatstreamSsUtilsOrdServerResponsesBlockResponse {
  pub fn new() -> GithubComSatstreamSsUtilsOrdServerResponsesBlockResponse {
    GithubComSatstreamSsUtilsOrdServerResponsesBlockResponse {
      best_height: None,
      hash: None,
      height: None,
      inscriptions: None,
      runes: None,
      target: None,
      transactions: None
    }
  }

  pub fn set_best_height(&mut self, best_height: i32) {
    self.best_height = Some(best_height);
  }

  pub fn with_best_height(mut self, best_height: i32) -> GithubComSatstreamSsUtilsOrdServerResponsesBlockResponse {
    self.best_height = Some(best_height);
    self
  }

  pub fn best_height(&self) -> Option<&i32> {
    self.best_height.as_ref()
  }

  pub fn reset_best_height(&mut self) {
    self.best_height = None;
  }

  pub fn set_hash(&mut self, hash: String) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: String) -> GithubComSatstreamSsUtilsOrdServerResponsesBlockResponse {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&String> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_height(&mut self, height: i32) {
    self.height = Some(height);
  }

  pub fn with_height(mut self, height: i32) -> GithubComSatstreamSsUtilsOrdServerResponsesBlockResponse {
    self.height = Some(height);
    self
  }

  pub fn height(&self) -> Option<&i32> {
    self.height.as_ref()
  }

  pub fn reset_height(&mut self) {
    self.height = None;
  }

  pub fn set_inscriptions(&mut self, inscriptions: Vec<String>) {
    self.inscriptions = Some(inscriptions);
  }

  pub fn with_inscriptions(mut self, inscriptions: Vec<String>) -> GithubComSatstreamSsUtilsOrdServerResponsesBlockResponse {
    self.inscriptions = Some(inscriptions);
    self
  }

  pub fn inscriptions(&self) -> Option<&Vec<String>> {
    self.inscriptions.as_ref()
  }

  pub fn reset_inscriptions(&mut self) {
    self.inscriptions = None;
  }

  pub fn set_runes(&mut self, runes: Vec<String>) {
    self.runes = Some(runes);
  }

  pub fn with_runes(mut self, runes: Vec<String>) -> GithubComSatstreamSsUtilsOrdServerResponsesBlockResponse {
    self.runes = Some(runes);
    self
  }

  pub fn runes(&self) -> Option<&Vec<String>> {
    self.runes.as_ref()
  }

  pub fn reset_runes(&mut self) {
    self.runes = None;
  }

  pub fn set_target(&mut self, target: String) {
    self.target = Some(target);
  }

  pub fn with_target(mut self, target: String) -> GithubComSatstreamSsUtilsOrdServerResponsesBlockResponse {
    self.target = Some(target);
    self
  }

  pub fn target(&self) -> Option<&String> {
    self.target.as_ref()
  }

  pub fn reset_target(&mut self) {
    self.target = None;
  }

  pub fn set_transactions(&mut self, transactions: Vec<::models::GithubComSatstreamSsUtilsOrdServerResponsesTransaction>) {
    self.transactions = Some(transactions);
  }

  pub fn with_transactions(mut self, transactions: Vec<::models::GithubComSatstreamSsUtilsOrdServerResponsesTransaction>) -> GithubComSatstreamSsUtilsOrdServerResponsesBlockResponse {
    self.transactions = Some(transactions);
    self
  }

  pub fn transactions(&self) -> Option<&Vec<::models::GithubComSatstreamSsUtilsOrdServerResponsesTransaction>> {
    self.transactions.as_ref()
  }

  pub fn reset_transactions(&mut self) {
    self.transactions = None;
  }

}



