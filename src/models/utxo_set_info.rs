/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UtxoSetInfo {
  /// The hash of the block at which these statistics are calculated
  #[serde(rename = "bestblock")]
  bestblock: Option<String>,
  #[serde(rename = "block_info")]
  block_info: Option<::models::UtxoSetInfoBlockInfo>,
  /// Database-independent metric indicating the UTXO set size
  #[serde(rename = "bogosize")]
  bogosize: Option<i32>,
  /// The estimated size of the chainstate on disk
  #[serde(rename = "disk_size")]
  disk_size: Option<i32>,
  /// The serialized hash (only for hash_serialized_2)
  #[serde(rename = "hash_serialized_2")]
  hash_serialized_2: Option<String>,
  /// The block height of the returned statistics
  #[serde(rename = "height")]
  height: Option<i32>,
  /// The serialized hash (only for muhash)
  #[serde(rename = "muhash")]
  muhash: Option<String>,
  /// The total amount of coins in the UTXO set
  #[serde(rename = "total_amount")]
  total_amount: Option<f32>,
  /// Total amount permanently excluded from UTXO set
  #[serde(rename = "total_unspendable_amount")]
  total_unspendable_amount: Option<f32>,
  /// The number of transactions with unspent outputs
  #[serde(rename = "transactions")]
  transactions: Option<i32>,
  /// The number of unspent transaction outputs
  #[serde(rename = "txouts")]
  txouts: Option<i32>
}

impl UtxoSetInfo {
  pub fn new() -> UtxoSetInfo {
    UtxoSetInfo {
      bestblock: None,
      block_info: None,
      bogosize: None,
      disk_size: None,
      hash_serialized_2: None,
      height: None,
      muhash: None,
      total_amount: None,
      total_unspendable_amount: None,
      transactions: None,
      txouts: None
    }
  }

  pub fn set_bestblock(&mut self, bestblock: String) {
    self.bestblock = Some(bestblock);
  }

  pub fn with_bestblock(mut self, bestblock: String) -> UtxoSetInfo {
    self.bestblock = Some(bestblock);
    self
  }

  pub fn bestblock(&self) -> Option<&String> {
    self.bestblock.as_ref()
  }

  pub fn reset_bestblock(&mut self) {
    self.bestblock = None;
  }

  pub fn set_block_info(&mut self, block_info: ::models::UtxoSetInfoBlockInfo) {
    self.block_info = Some(block_info);
  }

  pub fn with_block_info(mut self, block_info: ::models::UtxoSetInfoBlockInfo) -> UtxoSetInfo {
    self.block_info = Some(block_info);
    self
  }

  pub fn block_info(&self) -> Option<&::models::UtxoSetInfoBlockInfo> {
    self.block_info.as_ref()
  }

  pub fn reset_block_info(&mut self) {
    self.block_info = None;
  }

  pub fn set_bogosize(&mut self, bogosize: i32) {
    self.bogosize = Some(bogosize);
  }

  pub fn with_bogosize(mut self, bogosize: i32) -> UtxoSetInfo {
    self.bogosize = Some(bogosize);
    self
  }

  pub fn bogosize(&self) -> Option<&i32> {
    self.bogosize.as_ref()
  }

  pub fn reset_bogosize(&mut self) {
    self.bogosize = None;
  }

  pub fn set_disk_size(&mut self, disk_size: i32) {
    self.disk_size = Some(disk_size);
  }

  pub fn with_disk_size(mut self, disk_size: i32) -> UtxoSetInfo {
    self.disk_size = Some(disk_size);
    self
  }

  pub fn disk_size(&self) -> Option<&i32> {
    self.disk_size.as_ref()
  }

  pub fn reset_disk_size(&mut self) {
    self.disk_size = None;
  }

  pub fn set_hash_serialized_2(&mut self, hash_serialized_2: String) {
    self.hash_serialized_2 = Some(hash_serialized_2);
  }

  pub fn with_hash_serialized_2(mut self, hash_serialized_2: String) -> UtxoSetInfo {
    self.hash_serialized_2 = Some(hash_serialized_2);
    self
  }

  pub fn hash_serialized_2(&self) -> Option<&String> {
    self.hash_serialized_2.as_ref()
  }

  pub fn reset_hash_serialized_2(&mut self) {
    self.hash_serialized_2 = None;
  }

  pub fn set_height(&mut self, height: i32) {
    self.height = Some(height);
  }

  pub fn with_height(mut self, height: i32) -> UtxoSetInfo {
    self.height = Some(height);
    self
  }

  pub fn height(&self) -> Option<&i32> {
    self.height.as_ref()
  }

  pub fn reset_height(&mut self) {
    self.height = None;
  }

  pub fn set_muhash(&mut self, muhash: String) {
    self.muhash = Some(muhash);
  }

  pub fn with_muhash(mut self, muhash: String) -> UtxoSetInfo {
    self.muhash = Some(muhash);
    self
  }

  pub fn muhash(&self) -> Option<&String> {
    self.muhash.as_ref()
  }

  pub fn reset_muhash(&mut self) {
    self.muhash = None;
  }

  pub fn set_total_amount(&mut self, total_amount: f32) {
    self.total_amount = Some(total_amount);
  }

  pub fn with_total_amount(mut self, total_amount: f32) -> UtxoSetInfo {
    self.total_amount = Some(total_amount);
    self
  }

  pub fn total_amount(&self) -> Option<&f32> {
    self.total_amount.as_ref()
  }

  pub fn reset_total_amount(&mut self) {
    self.total_amount = None;
  }

  pub fn set_total_unspendable_amount(&mut self, total_unspendable_amount: f32) {
    self.total_unspendable_amount = Some(total_unspendable_amount);
  }

  pub fn with_total_unspendable_amount(mut self, total_unspendable_amount: f32) -> UtxoSetInfo {
    self.total_unspendable_amount = Some(total_unspendable_amount);
    self
  }

  pub fn total_unspendable_amount(&self) -> Option<&f32> {
    self.total_unspendable_amount.as_ref()
  }

  pub fn reset_total_unspendable_amount(&mut self) {
    self.total_unspendable_amount = None;
  }

  pub fn set_transactions(&mut self, transactions: i32) {
    self.transactions = Some(transactions);
  }

  pub fn with_transactions(mut self, transactions: i32) -> UtxoSetInfo {
    self.transactions = Some(transactions);
    self
  }

  pub fn transactions(&self) -> Option<&i32> {
    self.transactions.as_ref()
  }

  pub fn reset_transactions(&mut self) {
    self.transactions = None;
  }

  pub fn set_txouts(&mut self, txouts: i32) {
    self.txouts = Some(txouts);
  }

  pub fn with_txouts(mut self, txouts: i32) -> UtxoSetInfo {
    self.txouts = Some(txouts);
    self
  }

  pub fn txouts(&self) -> Option<&i32> {
    self.txouts.as_ref()
  }

  pub fn reset_txouts(&mut self) {
    self.txouts = None;
  }

}



