/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PrevOut {
  #[serde(rename = "generated")]
  generated: Option<bool>,
  #[serde(rename = "height")]
  height: Option<i32>,
  #[serde(rename = "scriptPubKey")]
  script_pub_key: Option<::models::ScriptPubKey>,
  #[serde(rename = "value")]
  value: Option<f32>
}

impl PrevOut {
  pub fn new() -> PrevOut {
    PrevOut {
      generated: None,
      height: None,
      script_pub_key: None,
      value: None
    }
  }

  pub fn set_generated(&mut self, generated: bool) {
    self.generated = Some(generated);
  }

  pub fn with_generated(mut self, generated: bool) -> PrevOut {
    self.generated = Some(generated);
    self
  }

  pub fn generated(&self) -> Option<&bool> {
    self.generated.as_ref()
  }

  pub fn reset_generated(&mut self) {
    self.generated = None;
  }

  pub fn set_height(&mut self, height: i32) {
    self.height = Some(height);
  }

  pub fn with_height(mut self, height: i32) -> PrevOut {
    self.height = Some(height);
    self
  }

  pub fn height(&self) -> Option<&i32> {
    self.height.as_ref()
  }

  pub fn reset_height(&mut self) {
    self.height = None;
  }

  pub fn set_script_pub_key(&mut self, script_pub_key: ::models::ScriptPubKey) {
    self.script_pub_key = Some(script_pub_key);
  }

  pub fn with_script_pub_key(mut self, script_pub_key: ::models::ScriptPubKey) -> PrevOut {
    self.script_pub_key = Some(script_pub_key);
    self
  }

  pub fn script_pub_key(&self) -> Option<&::models::ScriptPubKey> {
    self.script_pub_key.as_ref()
  }

  pub fn reset_script_pub_key(&mut self) {
    self.script_pub_key = None;
  }

  pub fn set_value(&mut self, value: f32) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: f32) -> PrevOut {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&f32> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

}



