/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate {
  /// Exponential decay (per block) for historical moving average
  #[serde(rename = "decay")]
  decay: Option<f32>,
  /// Errors encountered during processing
  #[serde(rename = "errors")]
  errors: Option<Vec<String>>,
  #[serde(rename = "fail")]
  fail: Option<::models::GithubComSatstreamSsutilsBitcoincliFeeHorizonEstimateFail>,
  /// Estimate fee rate in BTC/kvB
  #[serde(rename = "feerate")]
  feerate: Option<f32>,
  #[serde(rename = "pass")]
  pass: Option<::models::GithubComSatstreamSsutilsBitcoincliFeeHorizonEstimatePass>,
  /// Resolution of confirmation targets at this time horizon
  #[serde(rename = "scale")]
  scale: Option<f32>
}

impl GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate {
  pub fn new() -> GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate {
    GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate {
      decay: None,
      errors: None,
      fail: None,
      feerate: None,
      pass: None,
      scale: None
    }
  }

  pub fn set_decay(&mut self, decay: f32) {
    self.decay = Some(decay);
  }

  pub fn with_decay(mut self, decay: f32) -> GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate {
    self.decay = Some(decay);
    self
  }

  pub fn decay(&self) -> Option<&f32> {
    self.decay.as_ref()
  }

  pub fn reset_decay(&mut self) {
    self.decay = None;
  }

  pub fn set_errors(&mut self, errors: Vec<String>) {
    self.errors = Some(errors);
  }

  pub fn with_errors(mut self, errors: Vec<String>) -> GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate {
    self.errors = Some(errors);
    self
  }

  pub fn errors(&self) -> Option<&Vec<String>> {
    self.errors.as_ref()
  }

  pub fn reset_errors(&mut self) {
    self.errors = None;
  }

  pub fn set_fail(&mut self, fail: ::models::GithubComSatstreamSsutilsBitcoincliFeeHorizonEstimateFail) {
    self.fail = Some(fail);
  }

  pub fn with_fail(mut self, fail: ::models::GithubComSatstreamSsutilsBitcoincliFeeHorizonEstimateFail) -> GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate {
    self.fail = Some(fail);
    self
  }

  pub fn fail(&self) -> Option<&::models::GithubComSatstreamSsutilsBitcoincliFeeHorizonEstimateFail> {
    self.fail.as_ref()
  }

  pub fn reset_fail(&mut self) {
    self.fail = None;
  }

  pub fn set_feerate(&mut self, feerate: f32) {
    self.feerate = Some(feerate);
  }

  pub fn with_feerate(mut self, feerate: f32) -> GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate {
    self.feerate = Some(feerate);
    self
  }

  pub fn feerate(&self) -> Option<&f32> {
    self.feerate.as_ref()
  }

  pub fn reset_feerate(&mut self) {
    self.feerate = None;
  }

  pub fn set_pass(&mut self, pass: ::models::GithubComSatstreamSsutilsBitcoincliFeeHorizonEstimatePass) {
    self.pass = Some(pass);
  }

  pub fn with_pass(mut self, pass: ::models::GithubComSatstreamSsutilsBitcoincliFeeHorizonEstimatePass) -> GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate {
    self.pass = Some(pass);
    self
  }

  pub fn pass(&self) -> Option<&::models::GithubComSatstreamSsutilsBitcoincliFeeHorizonEstimatePass> {
    self.pass.as_ref()
  }

  pub fn reset_pass(&mut self) {
    self.pass = None;
  }

  pub fn set_scale(&mut self, scale: f32) {
    self.scale = Some(scale);
  }

  pub fn with_scale(mut self, scale: f32) -> GithubComSatstreamSsUtilsBitcoinCliFeeHorizonEstimate {
    self.scale = Some(scale);
    self
  }

  pub fn scale(&self) -> Option<&f32> {
    self.scale.as_ref()
  }

  pub fn reset_scale(&mut self) {
    self.scale = None;
  }

}



