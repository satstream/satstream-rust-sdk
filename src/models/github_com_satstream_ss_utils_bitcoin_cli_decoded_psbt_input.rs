/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput {
  /// The BIP32 derivation paths
  #[serde(rename = "bip32_derivs")]
  bip32_derivs: Option<::std::collections::HashMap<String, ::models::GithubComSatstreamSsUtilsBitcoinCliBip32Deriv>>,
  #[serde(rename = "final_scriptsig")]
  final_scriptsig: Option<::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputFinalScriptsig>,
  /// The final script witness
  #[serde(rename = "final_scriptwitness")]
  final_scriptwitness: Option<Vec<String>>,
  #[serde(rename = "non_witness_utxo")]
  non_witness_utxo: Option<::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputNonWitnessUtxo>,
  /// The public key and signature pairs
  #[serde(rename = "partial_signatures")]
  partial_signatures: Option<::std::collections::HashMap<String, String>>,
  #[serde(rename = "redeem_script")]
  redeem_script: Option<::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputRedeemScript>,
  /// The sighash type to be used
  #[serde(rename = "sighash")]
  sighash: Option<String>,
  /// Unknown fields
  #[serde(rename = "unknown")]
  unknown: Option<::std::collections::HashMap<String, ::models::Object>>,
  #[serde(rename = "witness_script")]
  witness_script: Option<::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputWitnessScript>,
  #[serde(rename = "witness_utxo")]
  witness_utxo: Option<::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputWitnessUtxo>
}

impl GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput {
  pub fn new() -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput {
    GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput {
      bip32_derivs: None,
      final_scriptsig: None,
      final_scriptwitness: None,
      non_witness_utxo: None,
      partial_signatures: None,
      redeem_script: None,
      sighash: None,
      unknown: None,
      witness_script: None,
      witness_utxo: None
    }
  }

  pub fn set_bip32_derivs(&mut self, bip32_derivs: ::std::collections::HashMap<String, ::models::GithubComSatstreamSsUtilsBitcoinCliBip32Deriv>) {
    self.bip32_derivs = Some(bip32_derivs);
  }

  pub fn with_bip32_derivs(mut self, bip32_derivs: ::std::collections::HashMap<String, ::models::GithubComSatstreamSsUtilsBitcoinCliBip32Deriv>) -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput {
    self.bip32_derivs = Some(bip32_derivs);
    self
  }

  pub fn bip32_derivs(&self) -> Option<&::std::collections::HashMap<String, ::models::GithubComSatstreamSsUtilsBitcoinCliBip32Deriv>> {
    self.bip32_derivs.as_ref()
  }

  pub fn reset_bip32_derivs(&mut self) {
    self.bip32_derivs = None;
  }

  pub fn set_final_scriptsig(&mut self, final_scriptsig: ::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputFinalScriptsig) {
    self.final_scriptsig = Some(final_scriptsig);
  }

  pub fn with_final_scriptsig(mut self, final_scriptsig: ::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputFinalScriptsig) -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput {
    self.final_scriptsig = Some(final_scriptsig);
    self
  }

  pub fn final_scriptsig(&self) -> Option<&::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputFinalScriptsig> {
    self.final_scriptsig.as_ref()
  }

  pub fn reset_final_scriptsig(&mut self) {
    self.final_scriptsig = None;
  }

  pub fn set_final_scriptwitness(&mut self, final_scriptwitness: Vec<String>) {
    self.final_scriptwitness = Some(final_scriptwitness);
  }

  pub fn with_final_scriptwitness(mut self, final_scriptwitness: Vec<String>) -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput {
    self.final_scriptwitness = Some(final_scriptwitness);
    self
  }

  pub fn final_scriptwitness(&self) -> Option<&Vec<String>> {
    self.final_scriptwitness.as_ref()
  }

  pub fn reset_final_scriptwitness(&mut self) {
    self.final_scriptwitness = None;
  }

  pub fn set_non_witness_utxo(&mut self, non_witness_utxo: ::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputNonWitnessUtxo) {
    self.non_witness_utxo = Some(non_witness_utxo);
  }

  pub fn with_non_witness_utxo(mut self, non_witness_utxo: ::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputNonWitnessUtxo) -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput {
    self.non_witness_utxo = Some(non_witness_utxo);
    self
  }

  pub fn non_witness_utxo(&self) -> Option<&::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputNonWitnessUtxo> {
    self.non_witness_utxo.as_ref()
  }

  pub fn reset_non_witness_utxo(&mut self) {
    self.non_witness_utxo = None;
  }

  pub fn set_partial_signatures(&mut self, partial_signatures: ::std::collections::HashMap<String, String>) {
    self.partial_signatures = Some(partial_signatures);
  }

  pub fn with_partial_signatures(mut self, partial_signatures: ::std::collections::HashMap<String, String>) -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput {
    self.partial_signatures = Some(partial_signatures);
    self
  }

  pub fn partial_signatures(&self) -> Option<&::std::collections::HashMap<String, String>> {
    self.partial_signatures.as_ref()
  }

  pub fn reset_partial_signatures(&mut self) {
    self.partial_signatures = None;
  }

  pub fn set_redeem_script(&mut self, redeem_script: ::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputRedeemScript) {
    self.redeem_script = Some(redeem_script);
  }

  pub fn with_redeem_script(mut self, redeem_script: ::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputRedeemScript) -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput {
    self.redeem_script = Some(redeem_script);
    self
  }

  pub fn redeem_script(&self) -> Option<&::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputRedeemScript> {
    self.redeem_script.as_ref()
  }

  pub fn reset_redeem_script(&mut self) {
    self.redeem_script = None;
  }

  pub fn set_sighash(&mut self, sighash: String) {
    self.sighash = Some(sighash);
  }

  pub fn with_sighash(mut self, sighash: String) -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput {
    self.sighash = Some(sighash);
    self
  }

  pub fn sighash(&self) -> Option<&String> {
    self.sighash.as_ref()
  }

  pub fn reset_sighash(&mut self) {
    self.sighash = None;
  }

  pub fn set_unknown(&mut self, unknown: ::std::collections::HashMap<String, ::models::Object>) {
    self.unknown = Some(unknown);
  }

  pub fn with_unknown(mut self, unknown: ::std::collections::HashMap<String, ::models::Object>) -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput {
    self.unknown = Some(unknown);
    self
  }

  pub fn unknown(&self) -> Option<&::std::collections::HashMap<String, ::models::Object>> {
    self.unknown.as_ref()
  }

  pub fn reset_unknown(&mut self) {
    self.unknown = None;
  }

  pub fn set_witness_script(&mut self, witness_script: ::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputWitnessScript) {
    self.witness_script = Some(witness_script);
  }

  pub fn with_witness_script(mut self, witness_script: ::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputWitnessScript) -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput {
    self.witness_script = Some(witness_script);
    self
  }

  pub fn witness_script(&self) -> Option<&::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputWitnessScript> {
    self.witness_script.as_ref()
  }

  pub fn reset_witness_script(&mut self) {
    self.witness_script = None;
  }

  pub fn set_witness_utxo(&mut self, witness_utxo: ::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputWitnessUtxo) {
    self.witness_utxo = Some(witness_utxo);
  }

  pub fn with_witness_utxo(mut self, witness_utxo: ::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputWitnessUtxo) -> GithubComSatstreamSsUtilsBitcoinCliDecodedPsbtInput {
    self.witness_utxo = Some(witness_utxo);
    self
  }

  pub fn witness_utxo(&self) -> Option<&::models::GithubComSatstreamSsutilsBitcoincliDecodedPsbtInputWitnessUtxo> {
    self.witness_utxo.as_ref()
  }

  pub fn reset_witness_utxo(&mut self) {
    self.witness_utxo = None;
  }

}



