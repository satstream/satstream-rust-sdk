/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsBitcoinCliPsbtInputAnalysis {
  #[serde(rename = "has_utxo")]
  has_utxo: Option<bool>,
  #[serde(rename = "is_final")]
  is_final: Option<bool>,
  #[serde(rename = "missing")]
  missing: Option<::models::GithubComSatstreamSsUtilsBitcoinCliPsbtMissingData>,
  #[serde(rename = "next")]
  next: Option<String>
}

impl GithubComSatstreamSsUtilsBitcoinCliPsbtInputAnalysis {
  pub fn new() -> GithubComSatstreamSsUtilsBitcoinCliPsbtInputAnalysis {
    GithubComSatstreamSsUtilsBitcoinCliPsbtInputAnalysis {
      has_utxo: None,
      is_final: None,
      missing: None,
      next: None
    }
  }

  pub fn set_has_utxo(&mut self, has_utxo: bool) {
    self.has_utxo = Some(has_utxo);
  }

  pub fn with_has_utxo(mut self, has_utxo: bool) -> GithubComSatstreamSsUtilsBitcoinCliPsbtInputAnalysis {
    self.has_utxo = Some(has_utxo);
    self
  }

  pub fn has_utxo(&self) -> Option<&bool> {
    self.has_utxo.as_ref()
  }

  pub fn reset_has_utxo(&mut self) {
    self.has_utxo = None;
  }

  pub fn set_is_final(&mut self, is_final: bool) {
    self.is_final = Some(is_final);
  }

  pub fn with_is_final(mut self, is_final: bool) -> GithubComSatstreamSsUtilsBitcoinCliPsbtInputAnalysis {
    self.is_final = Some(is_final);
    self
  }

  pub fn is_final(&self) -> Option<&bool> {
    self.is_final.as_ref()
  }

  pub fn reset_is_final(&mut self) {
    self.is_final = None;
  }

  pub fn set_missing(&mut self, missing: ::models::GithubComSatstreamSsUtilsBitcoinCliPsbtMissingData) {
    self.missing = Some(missing);
  }

  pub fn with_missing(mut self, missing: ::models::GithubComSatstreamSsUtilsBitcoinCliPsbtMissingData) -> GithubComSatstreamSsUtilsBitcoinCliPsbtInputAnalysis {
    self.missing = Some(missing);
    self
  }

  pub fn missing(&self) -> Option<&::models::GithubComSatstreamSsUtilsBitcoinCliPsbtMissingData> {
    self.missing.as_ref()
  }

  pub fn reset_missing(&mut self) {
    self.missing = None;
  }

  pub fn set_next(&mut self, next: String) {
    self.next = Some(next);
  }

  pub fn with_next(mut self, next: String) -> GithubComSatstreamSsUtilsBitcoinCliPsbtInputAnalysis {
    self.next = Some(next);
    self
  }

  pub fn next(&self) -> Option<&String> {
    self.next.as_ref()
  }

  pub fn reset_next(&mut self) {
    self.next = None;
  }

}



