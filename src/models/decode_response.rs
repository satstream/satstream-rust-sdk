/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DecodeResponse {
  #[serde(rename = "inscriptions")]
  inscriptions: Option<Vec<::models::DecodedInscription>>,
  #[serde(rename = "runestone")]
  runestone: Option<::models::RunestoneData>
}

impl DecodeResponse {
  pub fn new() -> DecodeResponse {
    DecodeResponse {
      inscriptions: None,
      runestone: None
    }
  }

  pub fn set_inscriptions(&mut self, inscriptions: Vec<::models::DecodedInscription>) {
    self.inscriptions = Some(inscriptions);
  }

  pub fn with_inscriptions(mut self, inscriptions: Vec<::models::DecodedInscription>) -> DecodeResponse {
    self.inscriptions = Some(inscriptions);
    self
  }

  pub fn inscriptions(&self) -> Option<&Vec<::models::DecodedInscription>> {
    self.inscriptions.as_ref()
  }

  pub fn reset_inscriptions(&mut self) {
    self.inscriptions = None;
  }

  pub fn set_runestone(&mut self, runestone: ::models::RunestoneData) {
    self.runestone = Some(runestone);
  }

  pub fn with_runestone(mut self, runestone: ::models::RunestoneData) -> DecodeResponse {
    self.runestone = Some(runestone);
    self
  }

  pub fn runestone(&self) -> Option<&::models::RunestoneData> {
    self.runestone.as_ref()
  }

  pub fn reset_runestone(&mut self) {
    self.runestone = None;
  }

}



