/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RequestsEstimateSmartFeeRequest {
  /// Required: Confirmation target in blocks (1 - 1008)
  #[serde(rename = "conf_target")]
  conf_target: Option<i32>,
  /// Optional: The fee estimate mode (unset, economical, conservative)
  #[serde(rename = "estimate_mode")]
  estimate_mode: Option<String>
}

impl RequestsEstimateSmartFeeRequest {
  pub fn new() -> RequestsEstimateSmartFeeRequest {
    RequestsEstimateSmartFeeRequest {
      conf_target: None,
      estimate_mode: None
    }
  }

  pub fn set_conf_target(&mut self, conf_target: i32) {
    self.conf_target = Some(conf_target);
  }

  pub fn with_conf_target(mut self, conf_target: i32) -> RequestsEstimateSmartFeeRequest {
    self.conf_target = Some(conf_target);
    self
  }

  pub fn conf_target(&self) -> Option<&i32> {
    self.conf_target.as_ref()
  }

  pub fn reset_conf_target(&mut self) {
    self.conf_target = None;
  }

  pub fn set_estimate_mode(&mut self, estimate_mode: String) {
    self.estimate_mode = Some(estimate_mode);
  }

  pub fn with_estimate_mode(mut self, estimate_mode: String) -> RequestsEstimateSmartFeeRequest {
    self.estimate_mode = Some(estimate_mode);
    self
  }

  pub fn estimate_mode(&self) -> Option<&String> {
    self.estimate_mode.as_ref()
  }

  pub fn reset_estimate_mode(&mut self) {
    self.estimate_mode = None;
  }

}



