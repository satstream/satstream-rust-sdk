/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsBitcoinCliValidateAddressResult {
  /// The bitcoin address validated
  #[serde(rename = "address")]
  address: Option<String>,
  /// Error message, if any
  #[serde(rename = "error")]
  error: Option<String>,
  /// Indices of likely error locations
  #[serde(rename = "error_locations")]
  error_locations: Option<Vec<i32>>,
  /// If the key is a script
  #[serde(rename = "isscript")]
  isscript: Option<bool>,
  /// If the address is valid or not
  #[serde(rename = "isvalid")]
  isvalid: Option<bool>,
  /// If the address is a witness address
  #[serde(rename = "iswitness")]
  iswitness: Option<bool>,
  /// The hex-encoded scriptPubKey
  #[serde(rename = "scriptPubKey")]
  script_pub_key: Option<String>,
  /// The hex value of the witness program
  #[serde(rename = "witness_program")]
  witness_program: Option<String>,
  /// The version number of the witness program
  #[serde(rename = "witness_version")]
  witness_version: Option<i32>
}

impl GithubComSatstreamSsUtilsBitcoinCliValidateAddressResult {
  pub fn new() -> GithubComSatstreamSsUtilsBitcoinCliValidateAddressResult {
    GithubComSatstreamSsUtilsBitcoinCliValidateAddressResult {
      address: None,
      error: None,
      error_locations: None,
      isscript: None,
      isvalid: None,
      iswitness: None,
      script_pub_key: None,
      witness_program: None,
      witness_version: None
    }
  }

  pub fn set_address(&mut self, address: String) {
    self.address = Some(address);
  }

  pub fn with_address(mut self, address: String) -> GithubComSatstreamSsUtilsBitcoinCliValidateAddressResult {
    self.address = Some(address);
    self
  }

  pub fn address(&self) -> Option<&String> {
    self.address.as_ref()
  }

  pub fn reset_address(&mut self) {
    self.address = None;
  }

  pub fn set_error(&mut self, error: String) {
    self.error = Some(error);
  }

  pub fn with_error(mut self, error: String) -> GithubComSatstreamSsUtilsBitcoinCliValidateAddressResult {
    self.error = Some(error);
    self
  }

  pub fn error(&self) -> Option<&String> {
    self.error.as_ref()
  }

  pub fn reset_error(&mut self) {
    self.error = None;
  }

  pub fn set_error_locations(&mut self, error_locations: Vec<i32>) {
    self.error_locations = Some(error_locations);
  }

  pub fn with_error_locations(mut self, error_locations: Vec<i32>) -> GithubComSatstreamSsUtilsBitcoinCliValidateAddressResult {
    self.error_locations = Some(error_locations);
    self
  }

  pub fn error_locations(&self) -> Option<&Vec<i32>> {
    self.error_locations.as_ref()
  }

  pub fn reset_error_locations(&mut self) {
    self.error_locations = None;
  }

  pub fn set_isscript(&mut self, isscript: bool) {
    self.isscript = Some(isscript);
  }

  pub fn with_isscript(mut self, isscript: bool) -> GithubComSatstreamSsUtilsBitcoinCliValidateAddressResult {
    self.isscript = Some(isscript);
    self
  }

  pub fn isscript(&self) -> Option<&bool> {
    self.isscript.as_ref()
  }

  pub fn reset_isscript(&mut self) {
    self.isscript = None;
  }

  pub fn set_isvalid(&mut self, isvalid: bool) {
    self.isvalid = Some(isvalid);
  }

  pub fn with_isvalid(mut self, isvalid: bool) -> GithubComSatstreamSsUtilsBitcoinCliValidateAddressResult {
    self.isvalid = Some(isvalid);
    self
  }

  pub fn isvalid(&self) -> Option<&bool> {
    self.isvalid.as_ref()
  }

  pub fn reset_isvalid(&mut self) {
    self.isvalid = None;
  }

  pub fn set_iswitness(&mut self, iswitness: bool) {
    self.iswitness = Some(iswitness);
  }

  pub fn with_iswitness(mut self, iswitness: bool) -> GithubComSatstreamSsUtilsBitcoinCliValidateAddressResult {
    self.iswitness = Some(iswitness);
    self
  }

  pub fn iswitness(&self) -> Option<&bool> {
    self.iswitness.as_ref()
  }

  pub fn reset_iswitness(&mut self) {
    self.iswitness = None;
  }

  pub fn set_script_pub_key(&mut self, script_pub_key: String) {
    self.script_pub_key = Some(script_pub_key);
  }

  pub fn with_script_pub_key(mut self, script_pub_key: String) -> GithubComSatstreamSsUtilsBitcoinCliValidateAddressResult {
    self.script_pub_key = Some(script_pub_key);
    self
  }

  pub fn script_pub_key(&self) -> Option<&String> {
    self.script_pub_key.as_ref()
  }

  pub fn reset_script_pub_key(&mut self) {
    self.script_pub_key = None;
  }

  pub fn set_witness_program(&mut self, witness_program: String) {
    self.witness_program = Some(witness_program);
  }

  pub fn with_witness_program(mut self, witness_program: String) -> GithubComSatstreamSsUtilsBitcoinCliValidateAddressResult {
    self.witness_program = Some(witness_program);
    self
  }

  pub fn witness_program(&self) -> Option<&String> {
    self.witness_program.as_ref()
  }

  pub fn reset_witness_program(&mut self) {
    self.witness_program = None;
  }

  pub fn set_witness_version(&mut self, witness_version: i32) {
    self.witness_version = Some(witness_version);
  }

  pub fn with_witness_version(mut self, witness_version: i32) -> GithubComSatstreamSsUtilsBitcoinCliValidateAddressResult {
    self.witness_version = Some(witness_version);
    self
  }

  pub fn witness_version(&self) -> Option<&i32> {
    self.witness_version.as_ref()
  }

  pub fn reset_witness_version(&mut self) {
    self.witness_version = None;
  }

}



