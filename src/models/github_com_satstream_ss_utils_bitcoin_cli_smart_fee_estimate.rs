/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsBitcoinCliSmartFeeEstimate {
  /// Block number where estimate was found
  #[serde(rename = "blocks")]
  blocks: Option<i32>,
  /// Errors encountered during processing
  #[serde(rename = "errors")]
  errors: Option<Vec<String>>,
  /// Estimate fee rate in BTC/kvB
  #[serde(rename = "feerate")]
  feerate: Option<f32>
}

impl GithubComSatstreamSsUtilsBitcoinCliSmartFeeEstimate {
  pub fn new() -> GithubComSatstreamSsUtilsBitcoinCliSmartFeeEstimate {
    GithubComSatstreamSsUtilsBitcoinCliSmartFeeEstimate {
      blocks: None,
      errors: None,
      feerate: None
    }
  }

  pub fn set_blocks(&mut self, blocks: i32) {
    self.blocks = Some(blocks);
  }

  pub fn with_blocks(mut self, blocks: i32) -> GithubComSatstreamSsUtilsBitcoinCliSmartFeeEstimate {
    self.blocks = Some(blocks);
    self
  }

  pub fn blocks(&self) -> Option<&i32> {
    self.blocks.as_ref()
  }

  pub fn reset_blocks(&mut self) {
    self.blocks = None;
  }

  pub fn set_errors(&mut self, errors: Vec<String>) {
    self.errors = Some(errors);
  }

  pub fn with_errors(mut self, errors: Vec<String>) -> GithubComSatstreamSsUtilsBitcoinCliSmartFeeEstimate {
    self.errors = Some(errors);
    self
  }

  pub fn errors(&self) -> Option<&Vec<String>> {
    self.errors.as_ref()
  }

  pub fn reset_errors(&mut self) {
    self.errors = None;
  }

  pub fn set_feerate(&mut self, feerate: f32) {
    self.feerate = Some(feerate);
  }

  pub fn with_feerate(mut self, feerate: f32) -> GithubComSatstreamSsUtilsBitcoinCliSmartFeeEstimate {
    self.feerate = Some(feerate);
    self
  }

  pub fn feerate(&self) -> Option<&f32> {
    self.feerate.as_ref()
  }

  pub fn reset_feerate(&mut self) {
    self.feerate = None;
  }

}



