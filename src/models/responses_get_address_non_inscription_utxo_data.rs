/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResponsesGetAddressNonInscriptionUtxoData {
  #[serde(rename = "cursor")]
  cursor: Option<i32>,
  #[serde(rename = "total")]
  total: Option<i32>,
  #[serde(rename = "totalConfirmed")]
  total_confirmed: Option<i32>,
  #[serde(rename = "totalRunes")]
  total_runes: Option<i32>,
  #[serde(rename = "totalUnconfirmed")]
  total_unconfirmed: Option<i32>,
  #[serde(rename = "totalUnconfirmedSpend")]
  total_unconfirmed_spend: Option<i32>,
  #[serde(rename = "utxo")]
  utxo: Option<Vec<::models::ResponsesNonInscriptionUtxo>>
}

impl ResponsesGetAddressNonInscriptionUtxoData {
  pub fn new() -> ResponsesGetAddressNonInscriptionUtxoData {
    ResponsesGetAddressNonInscriptionUtxoData {
      cursor: None,
      total: None,
      total_confirmed: None,
      total_runes: None,
      total_unconfirmed: None,
      total_unconfirmed_spend: None,
      utxo: None
    }
  }

  pub fn set_cursor(&mut self, cursor: i32) {
    self.cursor = Some(cursor);
  }

  pub fn with_cursor(mut self, cursor: i32) -> ResponsesGetAddressNonInscriptionUtxoData {
    self.cursor = Some(cursor);
    self
  }

  pub fn cursor(&self) -> Option<&i32> {
    self.cursor.as_ref()
  }

  pub fn reset_cursor(&mut self) {
    self.cursor = None;
  }

  pub fn set_total(&mut self, total: i32) {
    self.total = Some(total);
  }

  pub fn with_total(mut self, total: i32) -> ResponsesGetAddressNonInscriptionUtxoData {
    self.total = Some(total);
    self
  }

  pub fn total(&self) -> Option<&i32> {
    self.total.as_ref()
  }

  pub fn reset_total(&mut self) {
    self.total = None;
  }

  pub fn set_total_confirmed(&mut self, total_confirmed: i32) {
    self.total_confirmed = Some(total_confirmed);
  }

  pub fn with_total_confirmed(mut self, total_confirmed: i32) -> ResponsesGetAddressNonInscriptionUtxoData {
    self.total_confirmed = Some(total_confirmed);
    self
  }

  pub fn total_confirmed(&self) -> Option<&i32> {
    self.total_confirmed.as_ref()
  }

  pub fn reset_total_confirmed(&mut self) {
    self.total_confirmed = None;
  }

  pub fn set_total_runes(&mut self, total_runes: i32) {
    self.total_runes = Some(total_runes);
  }

  pub fn with_total_runes(mut self, total_runes: i32) -> ResponsesGetAddressNonInscriptionUtxoData {
    self.total_runes = Some(total_runes);
    self
  }

  pub fn total_runes(&self) -> Option<&i32> {
    self.total_runes.as_ref()
  }

  pub fn reset_total_runes(&mut self) {
    self.total_runes = None;
  }

  pub fn set_total_unconfirmed(&mut self, total_unconfirmed: i32) {
    self.total_unconfirmed = Some(total_unconfirmed);
  }

  pub fn with_total_unconfirmed(mut self, total_unconfirmed: i32) -> ResponsesGetAddressNonInscriptionUtxoData {
    self.total_unconfirmed = Some(total_unconfirmed);
    self
  }

  pub fn total_unconfirmed(&self) -> Option<&i32> {
    self.total_unconfirmed.as_ref()
  }

  pub fn reset_total_unconfirmed(&mut self) {
    self.total_unconfirmed = None;
  }

  pub fn set_total_unconfirmed_spend(&mut self, total_unconfirmed_spend: i32) {
    self.total_unconfirmed_spend = Some(total_unconfirmed_spend);
  }

  pub fn with_total_unconfirmed_spend(mut self, total_unconfirmed_spend: i32) -> ResponsesGetAddressNonInscriptionUtxoData {
    self.total_unconfirmed_spend = Some(total_unconfirmed_spend);
    self
  }

  pub fn total_unconfirmed_spend(&self) -> Option<&i32> {
    self.total_unconfirmed_spend.as_ref()
  }

  pub fn reset_total_unconfirmed_spend(&mut self) {
    self.total_unconfirmed_spend = None;
  }

  pub fn set_utxo(&mut self, utxo: Vec<::models::ResponsesNonInscriptionUtxo>) {
    self.utxo = Some(utxo);
  }

  pub fn with_utxo(mut self, utxo: Vec<::models::ResponsesNonInscriptionUtxo>) -> ResponsesGetAddressNonInscriptionUtxoData {
    self.utxo = Some(utxo);
    self
  }

  pub fn utxo(&self) -> Option<&Vec<::models::ResponsesNonInscriptionUtxo>> {
    self.utxo.as_ref()
  }

  pub fn reset_utxo(&mut self) {
    self.utxo = None;
  }

}



