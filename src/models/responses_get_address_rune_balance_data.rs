/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResponsesGetAddressRuneBalanceData {
  #[serde(rename = "amount")]
  amount: Option<String>,
  #[serde(rename = "divisibility")]
  divisibility: Option<i32>,
  #[serde(rename = "rune")]
  rune: Option<String>,
  #[serde(rename = "runeid")]
  runeid: Option<String>,
  #[serde(rename = "spacedAmount")]
  spaced_amount: Option<String>,
  #[serde(rename = "spacedRune")]
  spaced_rune: Option<String>,
  #[serde(rename = "symbol")]
  symbol: Option<String>
}

impl ResponsesGetAddressRuneBalanceData {
  pub fn new() -> ResponsesGetAddressRuneBalanceData {
    ResponsesGetAddressRuneBalanceData {
      amount: None,
      divisibility: None,
      rune: None,
      runeid: None,
      spaced_amount: None,
      spaced_rune: None,
      symbol: None
    }
  }

  pub fn set_amount(&mut self, amount: String) {
    self.amount = Some(amount);
  }

  pub fn with_amount(mut self, amount: String) -> ResponsesGetAddressRuneBalanceData {
    self.amount = Some(amount);
    self
  }

  pub fn amount(&self) -> Option<&String> {
    self.amount.as_ref()
  }

  pub fn reset_amount(&mut self) {
    self.amount = None;
  }

  pub fn set_divisibility(&mut self, divisibility: i32) {
    self.divisibility = Some(divisibility);
  }

  pub fn with_divisibility(mut self, divisibility: i32) -> ResponsesGetAddressRuneBalanceData {
    self.divisibility = Some(divisibility);
    self
  }

  pub fn divisibility(&self) -> Option<&i32> {
    self.divisibility.as_ref()
  }

  pub fn reset_divisibility(&mut self) {
    self.divisibility = None;
  }

  pub fn set_rune(&mut self, rune: String) {
    self.rune = Some(rune);
  }

  pub fn with_rune(mut self, rune: String) -> ResponsesGetAddressRuneBalanceData {
    self.rune = Some(rune);
    self
  }

  pub fn rune(&self) -> Option<&String> {
    self.rune.as_ref()
  }

  pub fn reset_rune(&mut self) {
    self.rune = None;
  }

  pub fn set_runeid(&mut self, runeid: String) {
    self.runeid = Some(runeid);
  }

  pub fn with_runeid(mut self, runeid: String) -> ResponsesGetAddressRuneBalanceData {
    self.runeid = Some(runeid);
    self
  }

  pub fn runeid(&self) -> Option<&String> {
    self.runeid.as_ref()
  }

  pub fn reset_runeid(&mut self) {
    self.runeid = None;
  }

  pub fn set_spaced_amount(&mut self, spaced_amount: String) {
    self.spaced_amount = Some(spaced_amount);
  }

  pub fn with_spaced_amount(mut self, spaced_amount: String) -> ResponsesGetAddressRuneBalanceData {
    self.spaced_amount = Some(spaced_amount);
    self
  }

  pub fn spaced_amount(&self) -> Option<&String> {
    self.spaced_amount.as_ref()
  }

  pub fn reset_spaced_amount(&mut self) {
    self.spaced_amount = None;
  }

  pub fn set_spaced_rune(&mut self, spaced_rune: String) {
    self.spaced_rune = Some(spaced_rune);
  }

  pub fn with_spaced_rune(mut self, spaced_rune: String) -> ResponsesGetAddressRuneBalanceData {
    self.spaced_rune = Some(spaced_rune);
    self
  }

  pub fn spaced_rune(&self) -> Option<&String> {
    self.spaced_rune.as_ref()
  }

  pub fn reset_spaced_rune(&mut self) {
    self.spaced_rune = None;
  }

  pub fn set_symbol(&mut self, symbol: String) {
    self.symbol = Some(symbol);
  }

  pub fn with_symbol(mut self, symbol: String) -> ResponsesGetAddressRuneBalanceData {
    self.symbol = Some(symbol);
    self
  }

  pub fn symbol(&self) -> Option<&String> {
    self.symbol.as_ref()
  }

  pub fn reset_symbol(&mut self) {
    self.symbol = None;
  }

}



