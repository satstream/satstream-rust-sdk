/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RequestsGetTxOutProofRequest {
  /// Optional: If specified, looks for txid in the block with this hash
  #[serde(rename = "blockhash")]
  blockhash: Option<String>,
  /// Required: Array of transaction ids to filter
  #[serde(rename = "txids")]
  txids: Option<Vec<String>>
}

impl RequestsGetTxOutProofRequest {
  pub fn new() -> RequestsGetTxOutProofRequest {
    RequestsGetTxOutProofRequest {
      blockhash: None,
      txids: None
    }
  }

  pub fn set_blockhash(&mut self, blockhash: String) {
    self.blockhash = Some(blockhash);
  }

  pub fn with_blockhash(mut self, blockhash: String) -> RequestsGetTxOutProofRequest {
    self.blockhash = Some(blockhash);
    self
  }

  pub fn blockhash(&self) -> Option<&String> {
    self.blockhash.as_ref()
  }

  pub fn reset_blockhash(&mut self) {
    self.blockhash = None;
  }

  pub fn set_txids(&mut self, txids: Vec<String>) {
    self.txids = Some(txids);
  }

  pub fn with_txids(mut self, txids: Vec<String>) -> RequestsGetTxOutProofRequest {
    self.txids = Some(txids);
    self
  }

  pub fn txids(&self) -> Option<&Vec<String>> {
    self.txids.as_ref()
  }

  pub fn reset_txids(&mut self) {
    self.txids = None;
  }

}



