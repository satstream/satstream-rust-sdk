/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UtxoUnspendables {
  /// Transactions overridden by duplicates
  #[serde(rename = "bip30")]
  bip30: Option<f32>,
  /// Unspendable amount of Genesis block subsidy
  #[serde(rename = "genesis_block")]
  genesis_block: Option<f32>,
  /// Amounts sent to unspendable scripts
  #[serde(rename = "scripts")]
  scripts: Option<f32>,
  /// Fee rewards unclaimed by miners
  #[serde(rename = "unclaimed_rewards")]
  unclaimed_rewards: Option<f32>
}

impl UtxoUnspendables {
  pub fn new() -> UtxoUnspendables {
    UtxoUnspendables {
      bip30: None,
      genesis_block: None,
      scripts: None,
      unclaimed_rewards: None
    }
  }

  pub fn set_bip30(&mut self, bip30: f32) {
    self.bip30 = Some(bip30);
  }

  pub fn with_bip30(mut self, bip30: f32) -> UtxoUnspendables {
    self.bip30 = Some(bip30);
    self
  }

  pub fn bip30(&self) -> Option<&f32> {
    self.bip30.as_ref()
  }

  pub fn reset_bip30(&mut self) {
    self.bip30 = None;
  }

  pub fn set_genesis_block(&mut self, genesis_block: f32) {
    self.genesis_block = Some(genesis_block);
  }

  pub fn with_genesis_block(mut self, genesis_block: f32) -> UtxoUnspendables {
    self.genesis_block = Some(genesis_block);
    self
  }

  pub fn genesis_block(&self) -> Option<&f32> {
    self.genesis_block.as_ref()
  }

  pub fn reset_genesis_block(&mut self) {
    self.genesis_block = None;
  }

  pub fn set_scripts(&mut self, scripts: f32) {
    self.scripts = Some(scripts);
  }

  pub fn with_scripts(mut self, scripts: f32) -> UtxoUnspendables {
    self.scripts = Some(scripts);
    self
  }

  pub fn scripts(&self) -> Option<&f32> {
    self.scripts.as_ref()
  }

  pub fn reset_scripts(&mut self) {
    self.scripts = None;
  }

  pub fn set_unclaimed_rewards(&mut self, unclaimed_rewards: f32) {
    self.unclaimed_rewards = Some(unclaimed_rewards);
  }

  pub fn with_unclaimed_rewards(mut self, unclaimed_rewards: f32) -> UtxoUnspendables {
    self.unclaimed_rewards = Some(unclaimed_rewards);
    self
  }

  pub fn unclaimed_rewards(&self) -> Option<&f32> {
    self.unclaimed_rewards.as_ref()
  }

  pub fn reset_unclaimed_rewards(&mut self) {
    self.unclaimed_rewards = None;
  }

}



