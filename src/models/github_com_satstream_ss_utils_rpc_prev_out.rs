/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsRpcPrevOut {
  #[serde(rename = "height")]
  height: Option<i32>,
  #[serde(rename = "n")]
  n: Option<i32>,
  /// * The populated field is used to determine if the prevout has been populated from our code or automatically by the RPC on fetch
  #[serde(rename = "populated")]
  populated: Option<bool>,
  #[serde(rename = "rune_holdings")]
  rune_holdings: Option<Vec<::models::GithubComSatstreamSsUtilsRpcUtxoRune>>,
  #[serde(rename = "scriptPubKey")]
  script_pub_key: Option<::models::GithubComSatstreamSsUtilsRpcScriptPubKey>,
  #[serde(rename = "value")]
  value: Option<f32>
}

impl GithubComSatstreamSsUtilsRpcPrevOut {
  pub fn new() -> GithubComSatstreamSsUtilsRpcPrevOut {
    GithubComSatstreamSsUtilsRpcPrevOut {
      height: None,
      n: None,
      populated: None,
      rune_holdings: None,
      script_pub_key: None,
      value: None
    }
  }

  pub fn set_height(&mut self, height: i32) {
    self.height = Some(height);
  }

  pub fn with_height(mut self, height: i32) -> GithubComSatstreamSsUtilsRpcPrevOut {
    self.height = Some(height);
    self
  }

  pub fn height(&self) -> Option<&i32> {
    self.height.as_ref()
  }

  pub fn reset_height(&mut self) {
    self.height = None;
  }

  pub fn set_n(&mut self, n: i32) {
    self.n = Some(n);
  }

  pub fn with_n(mut self, n: i32) -> GithubComSatstreamSsUtilsRpcPrevOut {
    self.n = Some(n);
    self
  }

  pub fn n(&self) -> Option<&i32> {
    self.n.as_ref()
  }

  pub fn reset_n(&mut self) {
    self.n = None;
  }

  pub fn set_populated(&mut self, populated: bool) {
    self.populated = Some(populated);
  }

  pub fn with_populated(mut self, populated: bool) -> GithubComSatstreamSsUtilsRpcPrevOut {
    self.populated = Some(populated);
    self
  }

  pub fn populated(&self) -> Option<&bool> {
    self.populated.as_ref()
  }

  pub fn reset_populated(&mut self) {
    self.populated = None;
  }

  pub fn set_rune_holdings(&mut self, rune_holdings: Vec<::models::GithubComSatstreamSsUtilsRpcUtxoRune>) {
    self.rune_holdings = Some(rune_holdings);
  }

  pub fn with_rune_holdings(mut self, rune_holdings: Vec<::models::GithubComSatstreamSsUtilsRpcUtxoRune>) -> GithubComSatstreamSsUtilsRpcPrevOut {
    self.rune_holdings = Some(rune_holdings);
    self
  }

  pub fn rune_holdings(&self) -> Option<&Vec<::models::GithubComSatstreamSsUtilsRpcUtxoRune>> {
    self.rune_holdings.as_ref()
  }

  pub fn reset_rune_holdings(&mut self) {
    self.rune_holdings = None;
  }

  pub fn set_script_pub_key(&mut self, script_pub_key: ::models::GithubComSatstreamSsUtilsRpcScriptPubKey) {
    self.script_pub_key = Some(script_pub_key);
  }

  pub fn with_script_pub_key(mut self, script_pub_key: ::models::GithubComSatstreamSsUtilsRpcScriptPubKey) -> GithubComSatstreamSsUtilsRpcPrevOut {
    self.script_pub_key = Some(script_pub_key);
    self
  }

  pub fn script_pub_key(&self) -> Option<&::models::GithubComSatstreamSsUtilsRpcScriptPubKey> {
    self.script_pub_key.as_ref()
  }

  pub fn reset_script_pub_key(&mut self) {
    self.script_pub_key = None;
  }

  pub fn set_value(&mut self, value: f32) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: f32) -> GithubComSatstreamSsUtilsRpcPrevOut {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&f32> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

}



