/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RequestsGetNetworkHashPsRequest {
  /// Optional: To estimate at the time of the given height (default=-1)
  #[serde(rename = "height")]
  height: Option<i32>,
  /// Optional: The number of blocks (default=120, -1 for since last difficulty change)
  #[serde(rename = "nblocks")]
  nblocks: Option<i32>
}

impl RequestsGetNetworkHashPsRequest {
  pub fn new() -> RequestsGetNetworkHashPsRequest {
    RequestsGetNetworkHashPsRequest {
      height: None,
      nblocks: None
    }
  }

  pub fn set_height(&mut self, height: i32) {
    self.height = Some(height);
  }

  pub fn with_height(mut self, height: i32) -> RequestsGetNetworkHashPsRequest {
    self.height = Some(height);
    self
  }

  pub fn height(&self) -> Option<&i32> {
    self.height.as_ref()
  }

  pub fn reset_height(&mut self) {
    self.height = None;
  }

  pub fn set_nblocks(&mut self, nblocks: i32) {
    self.nblocks = Some(nblocks);
  }

  pub fn with_nblocks(mut self, nblocks: i32) -> RequestsGetNetworkHashPsRequest {
    self.nblocks = Some(nblocks);
    self
  }

  pub fn nblocks(&self) -> Option<&i32> {
    self.nblocks.as_ref()
  }

  pub fn reset_nblocks(&mut self) {
    self.nblocks = None;
  }

}



