/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PsbtAnalysis {
  #[serde(rename = "error")]
  error: Option<String>,
  #[serde(rename = "estimated_feerate")]
  estimated_feerate: Option<f32>,
  #[serde(rename = "estimated_vsize")]
  estimated_vsize: Option<i32>,
  #[serde(rename = "fee")]
  fee: Option<f32>,
  #[serde(rename = "inputs")]
  inputs: Option<Vec<::models::PsbtInputAnalysis>>,
  #[serde(rename = "next")]
  next: Option<String>
}

impl PsbtAnalysis {
  pub fn new() -> PsbtAnalysis {
    PsbtAnalysis {
      error: None,
      estimated_feerate: None,
      estimated_vsize: None,
      fee: None,
      inputs: None,
      next: None
    }
  }

  pub fn set_error(&mut self, error: String) {
    self.error = Some(error);
  }

  pub fn with_error(mut self, error: String) -> PsbtAnalysis {
    self.error = Some(error);
    self
  }

  pub fn error(&self) -> Option<&String> {
    self.error.as_ref()
  }

  pub fn reset_error(&mut self) {
    self.error = None;
  }

  pub fn set_estimated_feerate(&mut self, estimated_feerate: f32) {
    self.estimated_feerate = Some(estimated_feerate);
  }

  pub fn with_estimated_feerate(mut self, estimated_feerate: f32) -> PsbtAnalysis {
    self.estimated_feerate = Some(estimated_feerate);
    self
  }

  pub fn estimated_feerate(&self) -> Option<&f32> {
    self.estimated_feerate.as_ref()
  }

  pub fn reset_estimated_feerate(&mut self) {
    self.estimated_feerate = None;
  }

  pub fn set_estimated_vsize(&mut self, estimated_vsize: i32) {
    self.estimated_vsize = Some(estimated_vsize);
  }

  pub fn with_estimated_vsize(mut self, estimated_vsize: i32) -> PsbtAnalysis {
    self.estimated_vsize = Some(estimated_vsize);
    self
  }

  pub fn estimated_vsize(&self) -> Option<&i32> {
    self.estimated_vsize.as_ref()
  }

  pub fn reset_estimated_vsize(&mut self) {
    self.estimated_vsize = None;
  }

  pub fn set_fee(&mut self, fee: f32) {
    self.fee = Some(fee);
  }

  pub fn with_fee(mut self, fee: f32) -> PsbtAnalysis {
    self.fee = Some(fee);
    self
  }

  pub fn fee(&self) -> Option<&f32> {
    self.fee.as_ref()
  }

  pub fn reset_fee(&mut self) {
    self.fee = None;
  }

  pub fn set_inputs(&mut self, inputs: Vec<::models::PsbtInputAnalysis>) {
    self.inputs = Some(inputs);
  }

  pub fn with_inputs(mut self, inputs: Vec<::models::PsbtInputAnalysis>) -> PsbtAnalysis {
    self.inputs = Some(inputs);
    self
  }

  pub fn inputs(&self) -> Option<&Vec<::models::PsbtInputAnalysis>> {
    self.inputs.as_ref()
  }

  pub fn reset_inputs(&mut self) {
    self.inputs = None;
  }

  pub fn set_next(&mut self, next: String) {
    self.next = Some(next);
  }

  pub fn with_next(mut self, next: String) -> PsbtAnalysis {
    self.next = Some(next);
    self
  }

  pub fn next(&self) -> Option<&String> {
    self.next.as_ref()
  }

  pub fn reset_next(&mut self) {
    self.next = None;
  }

}



