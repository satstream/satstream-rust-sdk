/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
  #[serde(rename = "blockhash")]
  blockhash: Option<String>,
  #[serde(rename = "blocktime")]
  blocktime: Option<i32>,
  #[serde(rename = "confirmations")]
  confirmations: Option<i32>,
  #[serde(rename = "hash")]
  hash: Option<String>,
  #[serde(rename = "hex")]
  hex: Option<String>,
  #[serde(rename = "locktime")]
  locktime: Option<i32>,
  #[serde(rename = "size")]
  size: Option<i32>,
  #[serde(rename = "time")]
  time: Option<i32>,
  #[serde(rename = "txid")]
  txid: Option<String>,
  #[serde(rename = "version")]
  version: Option<i32>,
  #[serde(rename = "vin")]
  vin: Option<Vec<::models::GithubComSatstreamSsUtilsBitcoinCliTxVin2>>,
  #[serde(rename = "vout")]
  vout: Option<Vec<::models::GithubComSatstreamSsUtilsBitcoinCliVout>>,
  #[serde(rename = "vsize")]
  vsize: Option<i32>,
  #[serde(rename = "weight")]
  weight: Option<i32>
}

impl GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
  pub fn new() -> GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
    GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
      blockhash: None,
      blocktime: None,
      confirmations: None,
      hash: None,
      hex: None,
      locktime: None,
      size: None,
      time: None,
      txid: None,
      version: None,
      vin: None,
      vout: None,
      vsize: None,
      weight: None
    }
  }

  pub fn set_blockhash(&mut self, blockhash: String) {
    self.blockhash = Some(blockhash);
  }

  pub fn with_blockhash(mut self, blockhash: String) -> GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
    self.blockhash = Some(blockhash);
    self
  }

  pub fn blockhash(&self) -> Option<&String> {
    self.blockhash.as_ref()
  }

  pub fn reset_blockhash(&mut self) {
    self.blockhash = None;
  }

  pub fn set_blocktime(&mut self, blocktime: i32) {
    self.blocktime = Some(blocktime);
  }

  pub fn with_blocktime(mut self, blocktime: i32) -> GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
    self.blocktime = Some(blocktime);
    self
  }

  pub fn blocktime(&self) -> Option<&i32> {
    self.blocktime.as_ref()
  }

  pub fn reset_blocktime(&mut self) {
    self.blocktime = None;
  }

  pub fn set_confirmations(&mut self, confirmations: i32) {
    self.confirmations = Some(confirmations);
  }

  pub fn with_confirmations(mut self, confirmations: i32) -> GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
    self.confirmations = Some(confirmations);
    self
  }

  pub fn confirmations(&self) -> Option<&i32> {
    self.confirmations.as_ref()
  }

  pub fn reset_confirmations(&mut self) {
    self.confirmations = None;
  }

  pub fn set_hash(&mut self, hash: String) {
    self.hash = Some(hash);
  }

  pub fn with_hash(mut self, hash: String) -> GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
    self.hash = Some(hash);
    self
  }

  pub fn hash(&self) -> Option<&String> {
    self.hash.as_ref()
  }

  pub fn reset_hash(&mut self) {
    self.hash = None;
  }

  pub fn set_hex(&mut self, hex: String) {
    self.hex = Some(hex);
  }

  pub fn with_hex(mut self, hex: String) -> GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
    self.hex = Some(hex);
    self
  }

  pub fn hex(&self) -> Option<&String> {
    self.hex.as_ref()
  }

  pub fn reset_hex(&mut self) {
    self.hex = None;
  }

  pub fn set_locktime(&mut self, locktime: i32) {
    self.locktime = Some(locktime);
  }

  pub fn with_locktime(mut self, locktime: i32) -> GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
    self.locktime = Some(locktime);
    self
  }

  pub fn locktime(&self) -> Option<&i32> {
    self.locktime.as_ref()
  }

  pub fn reset_locktime(&mut self) {
    self.locktime = None;
  }

  pub fn set_size(&mut self, size: i32) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: i32) -> GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&i32> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_time(&mut self, time: i32) {
    self.time = Some(time);
  }

  pub fn with_time(mut self, time: i32) -> GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
    self.time = Some(time);
    self
  }

  pub fn time(&self) -> Option<&i32> {
    self.time.as_ref()
  }

  pub fn reset_time(&mut self) {
    self.time = None;
  }

  pub fn set_txid(&mut self, txid: String) {
    self.txid = Some(txid);
  }

  pub fn with_txid(mut self, txid: String) -> GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
    self.txid = Some(txid);
    self
  }

  pub fn txid(&self) -> Option<&String> {
    self.txid.as_ref()
  }

  pub fn reset_txid(&mut self) {
    self.txid = None;
  }

  pub fn set_version(&mut self, version: i32) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: i32) -> GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&i32> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

  pub fn set_vin(&mut self, vin: Vec<::models::GithubComSatstreamSsUtilsBitcoinCliTxVin2>) {
    self.vin = Some(vin);
  }

  pub fn with_vin(mut self, vin: Vec<::models::GithubComSatstreamSsUtilsBitcoinCliTxVin2>) -> GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
    self.vin = Some(vin);
    self
  }

  pub fn vin(&self) -> Option<&Vec<::models::GithubComSatstreamSsUtilsBitcoinCliTxVin2>> {
    self.vin.as_ref()
  }

  pub fn reset_vin(&mut self) {
    self.vin = None;
  }

  pub fn set_vout(&mut self, vout: Vec<::models::GithubComSatstreamSsUtilsBitcoinCliVout>) {
    self.vout = Some(vout);
  }

  pub fn with_vout(mut self, vout: Vec<::models::GithubComSatstreamSsUtilsBitcoinCliVout>) -> GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
    self.vout = Some(vout);
    self
  }

  pub fn vout(&self) -> Option<&Vec<::models::GithubComSatstreamSsUtilsBitcoinCliVout>> {
    self.vout.as_ref()
  }

  pub fn reset_vout(&mut self) {
    self.vout = None;
  }

  pub fn set_vsize(&mut self, vsize: i32) {
    self.vsize = Some(vsize);
  }

  pub fn with_vsize(mut self, vsize: i32) -> GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
    self.vsize = Some(vsize);
    self
  }

  pub fn vsize(&self) -> Option<&i32> {
    self.vsize.as_ref()
  }

  pub fn reset_vsize(&mut self) {
    self.vsize = None;
  }

  pub fn set_weight(&mut self, weight: i32) {
    self.weight = Some(weight);
  }

  pub fn with_weight(mut self, weight: i32) -> GithubComSatstreamSsUtilsBitcoinCliRawTx2 {
    self.weight = Some(weight);
    self
  }

  pub fn weight(&self) -> Option<&i32> {
    self.weight.as_ref()
  }

  pub fn reset_weight(&mut self) {
    self.weight = None;
  }

}



