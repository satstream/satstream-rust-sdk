/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsOrdServerResponsesRunesListResponse {
  #[serde(rename = "entries")]
  entries: Option<Vec<::models::GithubComSatstreamSsUtilsOrdServerResponsesRuneListEntry>>,
  #[serde(rename = "more")]
  more: Option<bool>,
  #[serde(rename = "next")]
  next: Option<i32>,
  #[serde(rename = "prev")]
  prev: Option<i32>
}

impl GithubComSatstreamSsUtilsOrdServerResponsesRunesListResponse {
  pub fn new() -> GithubComSatstreamSsUtilsOrdServerResponsesRunesListResponse {
    GithubComSatstreamSsUtilsOrdServerResponsesRunesListResponse {
      entries: None,
      more: None,
      next: None,
      prev: None
    }
  }

  pub fn set_entries(&mut self, entries: Vec<::models::GithubComSatstreamSsUtilsOrdServerResponsesRuneListEntry>) {
    self.entries = Some(entries);
  }

  pub fn with_entries(mut self, entries: Vec<::models::GithubComSatstreamSsUtilsOrdServerResponsesRuneListEntry>) -> GithubComSatstreamSsUtilsOrdServerResponsesRunesListResponse {
    self.entries = Some(entries);
    self
  }

  pub fn entries(&self) -> Option<&Vec<::models::GithubComSatstreamSsUtilsOrdServerResponsesRuneListEntry>> {
    self.entries.as_ref()
  }

  pub fn reset_entries(&mut self) {
    self.entries = None;
  }

  pub fn set_more(&mut self, more: bool) {
    self.more = Some(more);
  }

  pub fn with_more(mut self, more: bool) -> GithubComSatstreamSsUtilsOrdServerResponsesRunesListResponse {
    self.more = Some(more);
    self
  }

  pub fn more(&self) -> Option<&bool> {
    self.more.as_ref()
  }

  pub fn reset_more(&mut self) {
    self.more = None;
  }

  pub fn set_next(&mut self, next: i32) {
    self.next = Some(next);
  }

  pub fn with_next(mut self, next: i32) -> GithubComSatstreamSsUtilsOrdServerResponsesRunesListResponse {
    self.next = Some(next);
    self
  }

  pub fn next(&self) -> Option<&i32> {
    self.next.as_ref()
  }

  pub fn reset_next(&mut self) {
    self.next = None;
  }

  pub fn set_prev(&mut self, prev: i32) {
    self.prev = Some(prev);
  }

  pub fn with_prev(mut self, prev: i32) -> GithubComSatstreamSsUtilsOrdServerResponsesRunesListResponse {
    self.prev = Some(prev);
    self
  }

  pub fn prev(&self) -> Option<&i32> {
    self.prev.as_ref()
  }

  pub fn reset_prev(&mut self) {
    self.prev = None;
  }

}



