/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BlockStats {
  /// Average fee in the block
  #[serde(rename = "avgfee")]
  avgfee: Option<f32>,
  /// Average feerate (in satoshis per virtual byte)
  #[serde(rename = "avgfeerate")]
  avgfeerate: Option<f32>,
  /// Average transaction size
  #[serde(rename = "avgtxsize")]
  avgtxsize: Option<f32>,
  /// The block hash (to check for potential reorgs)
  #[serde(rename = "blockhash")]
  blockhash: Option<String>,
  /// Feerates at the 10th, 25th, 50th, 75th, and 90th percentile
  #[serde(rename = "feerate_percentiles")]
  feerate_percentiles: Option<Vec<f32>>,
  /// The height of the block
  #[serde(rename = "height")]
  height: Option<i32>,
  /// The number of inputs (excluding coinbase)
  #[serde(rename = "ins")]
  ins: Option<i32>,
  /// Maximum fee in the block
  #[serde(rename = "maxfee")]
  maxfee: Option<f32>,
  /// Maximum feerate (in satoshis per virtual byte)
  #[serde(rename = "maxfeerate")]
  maxfeerate: Option<f32>,
  /// Maximum transaction size
  #[serde(rename = "maxtxsize")]
  maxtxsize: Option<i32>,
  /// Truncated median fee in the block
  #[serde(rename = "medianfee")]
  medianfee: Option<f32>,
  /// The block median time past
  #[serde(rename = "mediantime")]
  mediantime: Option<i32>,
  /// Truncated median transaction size
  #[serde(rename = "mediantxsize")]
  mediantxsize: Option<i32>,
  /// Minimum fee in the block
  #[serde(rename = "minfee")]
  minfee: Option<f32>,
  /// Minimum feerate (in satoshis per virtual byte)
  #[serde(rename = "minfeerate")]
  minfeerate: Option<f32>,
  /// Minimum transaction size
  #[serde(rename = "mintxsize")]
  mintxsize: Option<i32>,
  /// The number of outputs
  #[serde(rename = "outs")]
  outs: Option<i32>,
  /// The block subsidy
  #[serde(rename = "subsidy")]
  subsidy: Option<f32>,
  /// Total size of all segwit transactions
  #[serde(rename = "swtotal_size")]
  swtotal_size: Option<i32>,
  /// Total weight of all segwit transactions
  #[serde(rename = "swtotal_weight")]
  swtotal_weight: Option<i32>,
  /// The number of segwit transactions
  #[serde(rename = "swtxs")]
  swtxs: Option<i32>,
  /// The block time
  #[serde(rename = "time")]
  time: Option<i32>,
  /// Total amount in all outputs
  #[serde(rename = "total_out")]
  total_out: Option<f32>,
  /// Total size of all non-coinbase transactions
  #[serde(rename = "total_size")]
  total_size: Option<i32>,
  /// Total weight of all non-coinbase transactions
  #[serde(rename = "total_weight")]
  total_weight: Option<i32>,
  /// The fee total
  #[serde(rename = "totalfee")]
  totalfee: Option<f32>,
  /// The number of transactions (excluding coinbase)
  #[serde(rename = "txs")]
  txs: Option<i32>,
  /// The increase/decrease in the number of unspent outputs
  #[serde(rename = "utxo_increase")]
  utxo_increase: Option<i32>,
  /// The increase/decrease in size for the utxo index
  #[serde(rename = "utxo_size_inc")]
  utxo_size_inc: Option<i32>
}

impl BlockStats {
  pub fn new() -> BlockStats {
    BlockStats {
      avgfee: None,
      avgfeerate: None,
      avgtxsize: None,
      blockhash: None,
      feerate_percentiles: None,
      height: None,
      ins: None,
      maxfee: None,
      maxfeerate: None,
      maxtxsize: None,
      medianfee: None,
      mediantime: None,
      mediantxsize: None,
      minfee: None,
      minfeerate: None,
      mintxsize: None,
      outs: None,
      subsidy: None,
      swtotal_size: None,
      swtotal_weight: None,
      swtxs: None,
      time: None,
      total_out: None,
      total_size: None,
      total_weight: None,
      totalfee: None,
      txs: None,
      utxo_increase: None,
      utxo_size_inc: None
    }
  }

  pub fn set_avgfee(&mut self, avgfee: f32) {
    self.avgfee = Some(avgfee);
  }

  pub fn with_avgfee(mut self, avgfee: f32) -> BlockStats {
    self.avgfee = Some(avgfee);
    self
  }

  pub fn avgfee(&self) -> Option<&f32> {
    self.avgfee.as_ref()
  }

  pub fn reset_avgfee(&mut self) {
    self.avgfee = None;
  }

  pub fn set_avgfeerate(&mut self, avgfeerate: f32) {
    self.avgfeerate = Some(avgfeerate);
  }

  pub fn with_avgfeerate(mut self, avgfeerate: f32) -> BlockStats {
    self.avgfeerate = Some(avgfeerate);
    self
  }

  pub fn avgfeerate(&self) -> Option<&f32> {
    self.avgfeerate.as_ref()
  }

  pub fn reset_avgfeerate(&mut self) {
    self.avgfeerate = None;
  }

  pub fn set_avgtxsize(&mut self, avgtxsize: f32) {
    self.avgtxsize = Some(avgtxsize);
  }

  pub fn with_avgtxsize(mut self, avgtxsize: f32) -> BlockStats {
    self.avgtxsize = Some(avgtxsize);
    self
  }

  pub fn avgtxsize(&self) -> Option<&f32> {
    self.avgtxsize.as_ref()
  }

  pub fn reset_avgtxsize(&mut self) {
    self.avgtxsize = None;
  }

  pub fn set_blockhash(&mut self, blockhash: String) {
    self.blockhash = Some(blockhash);
  }

  pub fn with_blockhash(mut self, blockhash: String) -> BlockStats {
    self.blockhash = Some(blockhash);
    self
  }

  pub fn blockhash(&self) -> Option<&String> {
    self.blockhash.as_ref()
  }

  pub fn reset_blockhash(&mut self) {
    self.blockhash = None;
  }

  pub fn set_feerate_percentiles(&mut self, feerate_percentiles: Vec<f32>) {
    self.feerate_percentiles = Some(feerate_percentiles);
  }

  pub fn with_feerate_percentiles(mut self, feerate_percentiles: Vec<f32>) -> BlockStats {
    self.feerate_percentiles = Some(feerate_percentiles);
    self
  }

  pub fn feerate_percentiles(&self) -> Option<&Vec<f32>> {
    self.feerate_percentiles.as_ref()
  }

  pub fn reset_feerate_percentiles(&mut self) {
    self.feerate_percentiles = None;
  }

  pub fn set_height(&mut self, height: i32) {
    self.height = Some(height);
  }

  pub fn with_height(mut self, height: i32) -> BlockStats {
    self.height = Some(height);
    self
  }

  pub fn height(&self) -> Option<&i32> {
    self.height.as_ref()
  }

  pub fn reset_height(&mut self) {
    self.height = None;
  }

  pub fn set_ins(&mut self, ins: i32) {
    self.ins = Some(ins);
  }

  pub fn with_ins(mut self, ins: i32) -> BlockStats {
    self.ins = Some(ins);
    self
  }

  pub fn ins(&self) -> Option<&i32> {
    self.ins.as_ref()
  }

  pub fn reset_ins(&mut self) {
    self.ins = None;
  }

  pub fn set_maxfee(&mut self, maxfee: f32) {
    self.maxfee = Some(maxfee);
  }

  pub fn with_maxfee(mut self, maxfee: f32) -> BlockStats {
    self.maxfee = Some(maxfee);
    self
  }

  pub fn maxfee(&self) -> Option<&f32> {
    self.maxfee.as_ref()
  }

  pub fn reset_maxfee(&mut self) {
    self.maxfee = None;
  }

  pub fn set_maxfeerate(&mut self, maxfeerate: f32) {
    self.maxfeerate = Some(maxfeerate);
  }

  pub fn with_maxfeerate(mut self, maxfeerate: f32) -> BlockStats {
    self.maxfeerate = Some(maxfeerate);
    self
  }

  pub fn maxfeerate(&self) -> Option<&f32> {
    self.maxfeerate.as_ref()
  }

  pub fn reset_maxfeerate(&mut self) {
    self.maxfeerate = None;
  }

  pub fn set_maxtxsize(&mut self, maxtxsize: i32) {
    self.maxtxsize = Some(maxtxsize);
  }

  pub fn with_maxtxsize(mut self, maxtxsize: i32) -> BlockStats {
    self.maxtxsize = Some(maxtxsize);
    self
  }

  pub fn maxtxsize(&self) -> Option<&i32> {
    self.maxtxsize.as_ref()
  }

  pub fn reset_maxtxsize(&mut self) {
    self.maxtxsize = None;
  }

  pub fn set_medianfee(&mut self, medianfee: f32) {
    self.medianfee = Some(medianfee);
  }

  pub fn with_medianfee(mut self, medianfee: f32) -> BlockStats {
    self.medianfee = Some(medianfee);
    self
  }

  pub fn medianfee(&self) -> Option<&f32> {
    self.medianfee.as_ref()
  }

  pub fn reset_medianfee(&mut self) {
    self.medianfee = None;
  }

  pub fn set_mediantime(&mut self, mediantime: i32) {
    self.mediantime = Some(mediantime);
  }

  pub fn with_mediantime(mut self, mediantime: i32) -> BlockStats {
    self.mediantime = Some(mediantime);
    self
  }

  pub fn mediantime(&self) -> Option<&i32> {
    self.mediantime.as_ref()
  }

  pub fn reset_mediantime(&mut self) {
    self.mediantime = None;
  }

  pub fn set_mediantxsize(&mut self, mediantxsize: i32) {
    self.mediantxsize = Some(mediantxsize);
  }

  pub fn with_mediantxsize(mut self, mediantxsize: i32) -> BlockStats {
    self.mediantxsize = Some(mediantxsize);
    self
  }

  pub fn mediantxsize(&self) -> Option<&i32> {
    self.mediantxsize.as_ref()
  }

  pub fn reset_mediantxsize(&mut self) {
    self.mediantxsize = None;
  }

  pub fn set_minfee(&mut self, minfee: f32) {
    self.minfee = Some(minfee);
  }

  pub fn with_minfee(mut self, minfee: f32) -> BlockStats {
    self.minfee = Some(minfee);
    self
  }

  pub fn minfee(&self) -> Option<&f32> {
    self.minfee.as_ref()
  }

  pub fn reset_minfee(&mut self) {
    self.minfee = None;
  }

  pub fn set_minfeerate(&mut self, minfeerate: f32) {
    self.minfeerate = Some(minfeerate);
  }

  pub fn with_minfeerate(mut self, minfeerate: f32) -> BlockStats {
    self.minfeerate = Some(minfeerate);
    self
  }

  pub fn minfeerate(&self) -> Option<&f32> {
    self.minfeerate.as_ref()
  }

  pub fn reset_minfeerate(&mut self) {
    self.minfeerate = None;
  }

  pub fn set_mintxsize(&mut self, mintxsize: i32) {
    self.mintxsize = Some(mintxsize);
  }

  pub fn with_mintxsize(mut self, mintxsize: i32) -> BlockStats {
    self.mintxsize = Some(mintxsize);
    self
  }

  pub fn mintxsize(&self) -> Option<&i32> {
    self.mintxsize.as_ref()
  }

  pub fn reset_mintxsize(&mut self) {
    self.mintxsize = None;
  }

  pub fn set_outs(&mut self, outs: i32) {
    self.outs = Some(outs);
  }

  pub fn with_outs(mut self, outs: i32) -> BlockStats {
    self.outs = Some(outs);
    self
  }

  pub fn outs(&self) -> Option<&i32> {
    self.outs.as_ref()
  }

  pub fn reset_outs(&mut self) {
    self.outs = None;
  }

  pub fn set_subsidy(&mut self, subsidy: f32) {
    self.subsidy = Some(subsidy);
  }

  pub fn with_subsidy(mut self, subsidy: f32) -> BlockStats {
    self.subsidy = Some(subsidy);
    self
  }

  pub fn subsidy(&self) -> Option<&f32> {
    self.subsidy.as_ref()
  }

  pub fn reset_subsidy(&mut self) {
    self.subsidy = None;
  }

  pub fn set_swtotal_size(&mut self, swtotal_size: i32) {
    self.swtotal_size = Some(swtotal_size);
  }

  pub fn with_swtotal_size(mut self, swtotal_size: i32) -> BlockStats {
    self.swtotal_size = Some(swtotal_size);
    self
  }

  pub fn swtotal_size(&self) -> Option<&i32> {
    self.swtotal_size.as_ref()
  }

  pub fn reset_swtotal_size(&mut self) {
    self.swtotal_size = None;
  }

  pub fn set_swtotal_weight(&mut self, swtotal_weight: i32) {
    self.swtotal_weight = Some(swtotal_weight);
  }

  pub fn with_swtotal_weight(mut self, swtotal_weight: i32) -> BlockStats {
    self.swtotal_weight = Some(swtotal_weight);
    self
  }

  pub fn swtotal_weight(&self) -> Option<&i32> {
    self.swtotal_weight.as_ref()
  }

  pub fn reset_swtotal_weight(&mut self) {
    self.swtotal_weight = None;
  }

  pub fn set_swtxs(&mut self, swtxs: i32) {
    self.swtxs = Some(swtxs);
  }

  pub fn with_swtxs(mut self, swtxs: i32) -> BlockStats {
    self.swtxs = Some(swtxs);
    self
  }

  pub fn swtxs(&self) -> Option<&i32> {
    self.swtxs.as_ref()
  }

  pub fn reset_swtxs(&mut self) {
    self.swtxs = None;
  }

  pub fn set_time(&mut self, time: i32) {
    self.time = Some(time);
  }

  pub fn with_time(mut self, time: i32) -> BlockStats {
    self.time = Some(time);
    self
  }

  pub fn time(&self) -> Option<&i32> {
    self.time.as_ref()
  }

  pub fn reset_time(&mut self) {
    self.time = None;
  }

  pub fn set_total_out(&mut self, total_out: f32) {
    self.total_out = Some(total_out);
  }

  pub fn with_total_out(mut self, total_out: f32) -> BlockStats {
    self.total_out = Some(total_out);
    self
  }

  pub fn total_out(&self) -> Option<&f32> {
    self.total_out.as_ref()
  }

  pub fn reset_total_out(&mut self) {
    self.total_out = None;
  }

  pub fn set_total_size(&mut self, total_size: i32) {
    self.total_size = Some(total_size);
  }

  pub fn with_total_size(mut self, total_size: i32) -> BlockStats {
    self.total_size = Some(total_size);
    self
  }

  pub fn total_size(&self) -> Option<&i32> {
    self.total_size.as_ref()
  }

  pub fn reset_total_size(&mut self) {
    self.total_size = None;
  }

  pub fn set_total_weight(&mut self, total_weight: i32) {
    self.total_weight = Some(total_weight);
  }

  pub fn with_total_weight(mut self, total_weight: i32) -> BlockStats {
    self.total_weight = Some(total_weight);
    self
  }

  pub fn total_weight(&self) -> Option<&i32> {
    self.total_weight.as_ref()
  }

  pub fn reset_total_weight(&mut self) {
    self.total_weight = None;
  }

  pub fn set_totalfee(&mut self, totalfee: f32) {
    self.totalfee = Some(totalfee);
  }

  pub fn with_totalfee(mut self, totalfee: f32) -> BlockStats {
    self.totalfee = Some(totalfee);
    self
  }

  pub fn totalfee(&self) -> Option<&f32> {
    self.totalfee.as_ref()
  }

  pub fn reset_totalfee(&mut self) {
    self.totalfee = None;
  }

  pub fn set_txs(&mut self, txs: i32) {
    self.txs = Some(txs);
  }

  pub fn with_txs(mut self, txs: i32) -> BlockStats {
    self.txs = Some(txs);
    self
  }

  pub fn txs(&self) -> Option<&i32> {
    self.txs.as_ref()
  }

  pub fn reset_txs(&mut self) {
    self.txs = None;
  }

  pub fn set_utxo_increase(&mut self, utxo_increase: i32) {
    self.utxo_increase = Some(utxo_increase);
  }

  pub fn with_utxo_increase(mut self, utxo_increase: i32) -> BlockStats {
    self.utxo_increase = Some(utxo_increase);
    self
  }

  pub fn utxo_increase(&self) -> Option<&i32> {
    self.utxo_increase.as_ref()
  }

  pub fn reset_utxo_increase(&mut self) {
    self.utxo_increase = None;
  }

  pub fn set_utxo_size_inc(&mut self, utxo_size_inc: i32) {
    self.utxo_size_inc = Some(utxo_size_inc);
  }

  pub fn with_utxo_size_inc(mut self, utxo_size_inc: i32) -> BlockStats {
    self.utxo_size_inc = Some(utxo_size_inc);
    self
  }

  pub fn utxo_size_inc(&self) -> Option<&i32> {
    self.utxo_size_inc.as_ref()
  }

  pub fn reset_utxo_size_inc(&mut self) {
    self.utxo_size_inc = None;
  }

}



