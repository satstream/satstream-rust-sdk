/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResponsesGetTxInfoData {
  #[serde(rename = "blkid")]
  blkid: Option<String>,
  #[serde(rename = "height")]
  height: Option<i32>,
  #[serde(rename = "idx")]
  idx: Option<i32>,
  #[serde(rename = "inSatoshi")]
  in_satoshi: Option<::models::BigInt>,
  #[serde(rename = "locktime")]
  locktime: Option<i32>,
  #[serde(rename = "nIn")]
  n_in: Option<i32>,
  #[serde(rename = "nInInscription")]
  n_in_inscription: Option<i32>,
  #[serde(rename = "nLostInscription")]
  n_lost_inscription: Option<i32>,
  #[serde(rename = "nNewInscription")]
  n_new_inscription: Option<i32>,
  #[serde(rename = "nOut")]
  n_out: Option<i32>,
  #[serde(rename = "nOutInscription")]
  n_out_inscription: Option<i32>,
  #[serde(rename = "outSatoshi")]
  out_satoshi: Option<::models::BigInt>,
  #[serde(rename = "size")]
  size: Option<i32>,
  #[serde(rename = "txid")]
  txid: Option<String>
}

impl ResponsesGetTxInfoData {
  pub fn new() -> ResponsesGetTxInfoData {
    ResponsesGetTxInfoData {
      blkid: None,
      height: None,
      idx: None,
      in_satoshi: None,
      locktime: None,
      n_in: None,
      n_in_inscription: None,
      n_lost_inscription: None,
      n_new_inscription: None,
      n_out: None,
      n_out_inscription: None,
      out_satoshi: None,
      size: None,
      txid: None
    }
  }

  pub fn set_blkid(&mut self, blkid: String) {
    self.blkid = Some(blkid);
  }

  pub fn with_blkid(mut self, blkid: String) -> ResponsesGetTxInfoData {
    self.blkid = Some(blkid);
    self
  }

  pub fn blkid(&self) -> Option<&String> {
    self.blkid.as_ref()
  }

  pub fn reset_blkid(&mut self) {
    self.blkid = None;
  }

  pub fn set_height(&mut self, height: i32) {
    self.height = Some(height);
  }

  pub fn with_height(mut self, height: i32) -> ResponsesGetTxInfoData {
    self.height = Some(height);
    self
  }

  pub fn height(&self) -> Option<&i32> {
    self.height.as_ref()
  }

  pub fn reset_height(&mut self) {
    self.height = None;
  }

  pub fn set_idx(&mut self, idx: i32) {
    self.idx = Some(idx);
  }

  pub fn with_idx(mut self, idx: i32) -> ResponsesGetTxInfoData {
    self.idx = Some(idx);
    self
  }

  pub fn idx(&self) -> Option<&i32> {
    self.idx.as_ref()
  }

  pub fn reset_idx(&mut self) {
    self.idx = None;
  }

  pub fn set_in_satoshi(&mut self, in_satoshi: ::models::BigInt) {
    self.in_satoshi = Some(in_satoshi);
  }

  pub fn with_in_satoshi(mut self, in_satoshi: ::models::BigInt) -> ResponsesGetTxInfoData {
    self.in_satoshi = Some(in_satoshi);
    self
  }

  pub fn in_satoshi(&self) -> Option<&::models::BigInt> {
    self.in_satoshi.as_ref()
  }

  pub fn reset_in_satoshi(&mut self) {
    self.in_satoshi = None;
  }

  pub fn set_locktime(&mut self, locktime: i32) {
    self.locktime = Some(locktime);
  }

  pub fn with_locktime(mut self, locktime: i32) -> ResponsesGetTxInfoData {
    self.locktime = Some(locktime);
    self
  }

  pub fn locktime(&self) -> Option<&i32> {
    self.locktime.as_ref()
  }

  pub fn reset_locktime(&mut self) {
    self.locktime = None;
  }

  pub fn set_n_in(&mut self, n_in: i32) {
    self.n_in = Some(n_in);
  }

  pub fn with_n_in(mut self, n_in: i32) -> ResponsesGetTxInfoData {
    self.n_in = Some(n_in);
    self
  }

  pub fn n_in(&self) -> Option<&i32> {
    self.n_in.as_ref()
  }

  pub fn reset_n_in(&mut self) {
    self.n_in = None;
  }

  pub fn set_n_in_inscription(&mut self, n_in_inscription: i32) {
    self.n_in_inscription = Some(n_in_inscription);
  }

  pub fn with_n_in_inscription(mut self, n_in_inscription: i32) -> ResponsesGetTxInfoData {
    self.n_in_inscription = Some(n_in_inscription);
    self
  }

  pub fn n_in_inscription(&self) -> Option<&i32> {
    self.n_in_inscription.as_ref()
  }

  pub fn reset_n_in_inscription(&mut self) {
    self.n_in_inscription = None;
  }

  pub fn set_n_lost_inscription(&mut self, n_lost_inscription: i32) {
    self.n_lost_inscription = Some(n_lost_inscription);
  }

  pub fn with_n_lost_inscription(mut self, n_lost_inscription: i32) -> ResponsesGetTxInfoData {
    self.n_lost_inscription = Some(n_lost_inscription);
    self
  }

  pub fn n_lost_inscription(&self) -> Option<&i32> {
    self.n_lost_inscription.as_ref()
  }

  pub fn reset_n_lost_inscription(&mut self) {
    self.n_lost_inscription = None;
  }

  pub fn set_n_new_inscription(&mut self, n_new_inscription: i32) {
    self.n_new_inscription = Some(n_new_inscription);
  }

  pub fn with_n_new_inscription(mut self, n_new_inscription: i32) -> ResponsesGetTxInfoData {
    self.n_new_inscription = Some(n_new_inscription);
    self
  }

  pub fn n_new_inscription(&self) -> Option<&i32> {
    self.n_new_inscription.as_ref()
  }

  pub fn reset_n_new_inscription(&mut self) {
    self.n_new_inscription = None;
  }

  pub fn set_n_out(&mut self, n_out: i32) {
    self.n_out = Some(n_out);
  }

  pub fn with_n_out(mut self, n_out: i32) -> ResponsesGetTxInfoData {
    self.n_out = Some(n_out);
    self
  }

  pub fn n_out(&self) -> Option<&i32> {
    self.n_out.as_ref()
  }

  pub fn reset_n_out(&mut self) {
    self.n_out = None;
  }

  pub fn set_n_out_inscription(&mut self, n_out_inscription: i32) {
    self.n_out_inscription = Some(n_out_inscription);
  }

  pub fn with_n_out_inscription(mut self, n_out_inscription: i32) -> ResponsesGetTxInfoData {
    self.n_out_inscription = Some(n_out_inscription);
    self
  }

  pub fn n_out_inscription(&self) -> Option<&i32> {
    self.n_out_inscription.as_ref()
  }

  pub fn reset_n_out_inscription(&mut self) {
    self.n_out_inscription = None;
  }

  pub fn set_out_satoshi(&mut self, out_satoshi: ::models::BigInt) {
    self.out_satoshi = Some(out_satoshi);
  }

  pub fn with_out_satoshi(mut self, out_satoshi: ::models::BigInt) -> ResponsesGetTxInfoData {
    self.out_satoshi = Some(out_satoshi);
    self
  }

  pub fn out_satoshi(&self) -> Option<&::models::BigInt> {
    self.out_satoshi.as_ref()
  }

  pub fn reset_out_satoshi(&mut self) {
    self.out_satoshi = None;
  }

  pub fn set_size(&mut self, size: i32) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: i32) -> ResponsesGetTxInfoData {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&i32> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_txid(&mut self, txid: String) {
    self.txid = Some(txid);
  }

  pub fn with_txid(mut self, txid: String) -> ResponsesGetTxInfoData {
    self.txid = Some(txid);
    self
  }

  pub fn txid(&self) -> Option<&String> {
    self.txid.as_ref()
  }

  pub fn reset_txid(&mut self) {
    self.txid = None;
  }

}



