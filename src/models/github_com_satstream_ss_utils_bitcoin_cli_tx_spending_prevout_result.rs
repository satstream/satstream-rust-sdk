/* 
 * Satstream API
 *
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GithubComSatstreamSsUtilsBitcoinCliTxSpendingPrevoutResult {
  /// The transaction id of the mempool transaction spending this output
  #[serde(rename = "spendingtxid")]
  spendingtxid: Option<String>,
  /// Whether the output is spent
  #[serde(rename = "spent")]
  spent: Option<bool>,
  /// The transaction id of the checked output
  #[serde(rename = "txid")]
  txid: Option<String>,
  /// The vout value of the checked output
  #[serde(rename = "vout")]
  vout: Option<i32>
}

impl GithubComSatstreamSsUtilsBitcoinCliTxSpendingPrevoutResult {
  pub fn new() -> GithubComSatstreamSsUtilsBitcoinCliTxSpendingPrevoutResult {
    GithubComSatstreamSsUtilsBitcoinCliTxSpendingPrevoutResult {
      spendingtxid: None,
      spent: None,
      txid: None,
      vout: None
    }
  }

  pub fn set_spendingtxid(&mut self, spendingtxid: String) {
    self.spendingtxid = Some(spendingtxid);
  }

  pub fn with_spendingtxid(mut self, spendingtxid: String) -> GithubComSatstreamSsUtilsBitcoinCliTxSpendingPrevoutResult {
    self.spendingtxid = Some(spendingtxid);
    self
  }

  pub fn spendingtxid(&self) -> Option<&String> {
    self.spendingtxid.as_ref()
  }

  pub fn reset_spendingtxid(&mut self) {
    self.spendingtxid = None;
  }

  pub fn set_spent(&mut self, spent: bool) {
    self.spent = Some(spent);
  }

  pub fn with_spent(mut self, spent: bool) -> GithubComSatstreamSsUtilsBitcoinCliTxSpendingPrevoutResult {
    self.spent = Some(spent);
    self
  }

  pub fn spent(&self) -> Option<&bool> {
    self.spent.as_ref()
  }

  pub fn reset_spent(&mut self) {
    self.spent = None;
  }

  pub fn set_txid(&mut self, txid: String) {
    self.txid = Some(txid);
  }

  pub fn with_txid(mut self, txid: String) -> GithubComSatstreamSsUtilsBitcoinCliTxSpendingPrevoutResult {
    self.txid = Some(txid);
    self
  }

  pub fn txid(&self) -> Option<&String> {
    self.txid.as_ref()
  }

  pub fn reset_txid(&mut self) {
    self.txid = None;
  }

  pub fn set_vout(&mut self, vout: i32) {
    self.vout = Some(vout);
  }

  pub fn with_vout(mut self, vout: i32) -> GithubComSatstreamSsUtilsBitcoinCliTxSpendingPrevoutResult {
    self.vout = Some(vout);
    self
  }

  pub fn vout(&self) -> Option<&i32> {
    self.vout.as_ref()
  }

  pub fn reset_vout(&mut self) {
    self.vout = None;
  }

}



